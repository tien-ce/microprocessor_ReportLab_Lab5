
Lab5_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f8c  08004f8c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004f8c  08004f8c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f8c  08004f8c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000078  0800500c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  0800500c  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001122b  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a5  00000000  00000000  000312cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00033978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00034818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196ad  00000000  00000000  000355c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b4d  00000000  00000000  0004ec6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eecb  00000000  00000000  0005f7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee685  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004804  00000000  00000000  000ee6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000f2edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f2f00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004de8 	.word	0x08004de8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004de8 	.word	0x08004de8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <fsm_init>:
uint8_t receive_flag = 0;
uint8_t wait_flag;
uint8_t num_send = 0;
uint8_t adc_value = 0;
int status = 1;
void fsm_init(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	srand((unsigned int)time(NULL));
 8000174:	2000      	movs	r0, #0
 8000176:	f003 fc85 	bl	8003a84 <time>
 800017a:	4602      	mov	r2, r0
 800017c:	460b      	mov	r3, r1
 800017e:	4613      	mov	r3, r2
 8000180:	4618      	mov	r0, r3
 8000182:	f003 fbf1 	bl	8003968 <srand>
	index_buffer = 0;
 8000186:	4b04      	ldr	r3, [pc, #16]	; (8000198 <fsm_init+0x28>)
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
	Receive_IT(&temp, 2);
 800018c:	2102      	movs	r1, #2
 800018e:	4803      	ldr	r0, [pc, #12]	; (800019c <fsm_init+0x2c>)
 8000190:	f000 fa4e 	bl	8000630 <Receive_IT>
}
 8000194:	bf00      	nop
 8000196:	bd80      	pop	{r7, pc}
 8000198:	20000098 	.word	0x20000098
 800019c:	20000094 	.word	0x20000094

080001a0 <receive_data>:

void receive_data(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	if(receive_flag == 1){
 80001a4:	4b26      	ldr	r3, [pc, #152]	; (8000240 <receive_data+0xa0>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d146      	bne.n	800023a <receive_data+0x9a>
		if(status == IDLE || status == WAIT){
 80001ac:	4b25      	ldr	r3, [pc, #148]	; (8000244 <receive_data+0xa4>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d003      	beq.n	80001bc <receive_data+0x1c>
 80001b4:	4b23      	ldr	r3, [pc, #140]	; (8000244 <receive_data+0xa4>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2b07      	cmp	r3, #7
 80001ba:	d13e      	bne.n	800023a <receive_data+0x9a>
			if(temp!='\r' && temp != '\b'){
 80001bc:	4b22      	ldr	r3, [pc, #136]	; (8000248 <receive_data+0xa8>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b0d      	cmp	r3, #13
 80001c2:	d01e      	beq.n	8000202 <receive_data+0x62>
 80001c4:	4b20      	ldr	r3, [pc, #128]	; (8000248 <receive_data+0xa8>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	2b08      	cmp	r3, #8
 80001ca:	d01a      	beq.n	8000202 <receive_data+0x62>
				if (index_buffer < MAX_BUFFER_SIZE){
 80001cc:	4b1f      	ldr	r3, [pc, #124]	; (800024c <receive_data+0xac>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2b1d      	cmp	r3, #29
 80001d2:	dc09      	bgt.n	80001e8 <receive_data+0x48>
					buffer[index_buffer++] = temp;
 80001d4:	4b1d      	ldr	r3, [pc, #116]	; (800024c <receive_data+0xac>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	1c5a      	adds	r2, r3, #1
 80001da:	491c      	ldr	r1, [pc, #112]	; (800024c <receive_data+0xac>)
 80001dc:	600a      	str	r2, [r1, #0]
 80001de:	4a1a      	ldr	r2, [pc, #104]	; (8000248 <receive_data+0xa8>)
 80001e0:	7811      	ldrb	r1, [r2, #0]
 80001e2:	4a1b      	ldr	r2, [pc, #108]	; (8000250 <receive_data+0xb0>)
 80001e4:	54d1      	strb	r1, [r2, r3]
				if (index_buffer < MAX_BUFFER_SIZE){
 80001e6:	e01d      	b.n	8000224 <receive_data+0x84>
				}
				else{
					index_buffer = 0;
 80001e8:	4b18      	ldr	r3, [pc, #96]	; (800024c <receive_data+0xac>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
					buffer[index_buffer++] = temp;
 80001ee:	4b17      	ldr	r3, [pc, #92]	; (800024c <receive_data+0xac>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	1c5a      	adds	r2, r3, #1
 80001f4:	4915      	ldr	r1, [pc, #84]	; (800024c <receive_data+0xac>)
 80001f6:	600a      	str	r2, [r1, #0]
 80001f8:	4a13      	ldr	r2, [pc, #76]	; (8000248 <receive_data+0xa8>)
 80001fa:	7811      	ldrb	r1, [r2, #0]
 80001fc:	4a14      	ldr	r2, [pc, #80]	; (8000250 <receive_data+0xb0>)
 80001fe:	54d1      	strb	r1, [r2, r3]
				if (index_buffer < MAX_BUFFER_SIZE){
 8000200:	e010      	b.n	8000224 <receive_data+0x84>
				}
			}
			else if(temp == '\b'){
 8000202:	4b11      	ldr	r3, [pc, #68]	; (8000248 <receive_data+0xa8>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b08      	cmp	r3, #8
 8000208:	d109      	bne.n	800021e <receive_data+0x7e>
				if(index_buffer>0)
 800020a:	4b10      	ldr	r3, [pc, #64]	; (800024c <receive_data+0xac>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	dd08      	ble.n	8000224 <receive_data+0x84>
					index_buffer --;
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <receive_data+0xac>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	3b01      	subs	r3, #1
 8000218:	4a0c      	ldr	r2, [pc, #48]	; (800024c <receive_data+0xac>)
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	e002      	b.n	8000224 <receive_data+0x84>
			}
			else{
				buffer_flag = 1;
 800021e:	4b0d      	ldr	r3, [pc, #52]	; (8000254 <receive_data+0xb4>)
 8000220:	2201      	movs	r2, #1
 8000222:	701a      	strb	r2, [r3, #0]
				//index_buffer = 0;
			}
			Receive_IT(&temp, 2);
 8000224:	2102      	movs	r1, #2
 8000226:	4808      	ldr	r0, [pc, #32]	; (8000248 <receive_data+0xa8>)
 8000228:	f000 fa02 	bl	8000630 <Receive_IT>
			receive_flag = 0;
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <receive_data+0xa0>)
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
			Transmit(&temp, 1);
 8000232:	2101      	movs	r1, #1
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <receive_data+0xa8>)
 8000236:	f000 fa1b 	bl	8000670 <Transmit>
		}
	}
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	2000009e 	.word	0x2000009e
 8000244:	20000000 	.word	0x20000000
 8000248:	20000094 	.word	0x20000094
 800024c:	20000098 	.word	0x20000098
 8000250:	200000b4 	.word	0x200000b4
 8000254:	2000009c 	.word	0x2000009c

08000258 <CommandParser_fsm>:
void CommandParser_fsm(){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	switch(status){
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <CommandParser_fsm+0x44>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3b01      	subs	r3, #1
 8000262:	2b03      	cmp	r3, #3
 8000264:	d816      	bhi.n	8000294 <CommandParser_fsm+0x3c>
 8000266:	a201      	add	r2, pc, #4	; (adr r2, 800026c <CommandParser_fsm+0x14>)
 8000268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800026c:	0800027d 	.word	0x0800027d
 8000270:	08000283 	.word	0x08000283
 8000274:	08000289 	.word	0x08000289
 8000278:	0800028f 	.word	0x0800028f
	case IDLE:
		idle_CommandParser();
 800027c:	f000 f82a 	bl	80002d4 <idle_CommandParser>
		break;
 8000280:	e009      	b.n	8000296 <CommandParser_fsm+0x3e>
	case FIND_SOC:
		find_SOC();
 8000282:	f000 f849 	bl	8000318 <find_SOC>
		break;
 8000286:	e006      	b.n	8000296 <CommandParser_fsm+0x3e>
	case FIND_EOC:
		find_EOC();
 8000288:	f000 f882 	bl	8000390 <find_EOC>
		break;
 800028c:	e003      	b.n	8000296 <CommandParser_fsm+0x3e>
	case CAPTURE_DATA:
		capture_data();
 800028e:	f000 f8bb 	bl	8000408 <capture_data>
		break;
 8000292:	e000      	b.n	8000296 <CommandParser_fsm+0x3e>
	default:
		break;
 8000294:	bf00      	nop
	}
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000000 	.word	0x20000000

080002a0 <UartCommunication_fsm>:
void  UartCommunication_fsm(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	switch(status){
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <UartCommunication_fsm+0x30>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b07      	cmp	r3, #7
 80002aa:	d00c      	beq.n	80002c6 <UartCommunication_fsm+0x26>
 80002ac:	2b07      	cmp	r3, #7
 80002ae:	dc0d      	bgt.n	80002cc <UartCommunication_fsm+0x2c>
 80002b0:	2b05      	cmp	r3, #5
 80002b2:	d002      	beq.n	80002ba <UartCommunication_fsm+0x1a>
 80002b4:	2b06      	cmp	r3, #6
 80002b6:	d003      	beq.n	80002c0 <UartCommunication_fsm+0x20>
		break;
	case WAIT:
		wait_ok();
		break;
	}
}
 80002b8:	e008      	b.n	80002cc <UartCommunication_fsm+0x2c>
		cmd_check();
 80002ba:	f000 f8ed 	bl	8000498 <cmd_check>
		break;
 80002be:	e005      	b.n	80002cc <UartCommunication_fsm+0x2c>
		send_data();
 80002c0:	f000 f93e 	bl	8000540 <send_data>
		break;
 80002c4:	e002      	b.n	80002cc <UartCommunication_fsm+0x2c>
		wait_ok();
 80002c6:	f000 f96f 	bl	80005a8 <wait_ok>
		break;
 80002ca:	bf00      	nop
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000000 	.word	0x20000000

080002d4 <idle_CommandParser>:

void idle_CommandParser(){
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	if(buffer_flag == 1){
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <idle_CommandParser+0x38>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d106      	bne.n	80002ee <idle_CommandParser+0x1a>
		status = FIND_SOC;
 80002e0:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <idle_CommandParser+0x3c>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <idle_CommandParser+0x38>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	701a      	strb	r2, [r3, #0]
	}
	else if (cmd_flag == 1){
		status = CMD_CHECK;
		cmd_flag = 0;
	}
}
 80002ec:	e009      	b.n	8000302 <idle_CommandParser+0x2e>
	else if (cmd_flag == 1){
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <idle_CommandParser+0x40>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d105      	bne.n	8000302 <idle_CommandParser+0x2e>
		status = CMD_CHECK;
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <idle_CommandParser+0x3c>)
 80002f8:	2205      	movs	r2, #5
 80002fa:	601a      	str	r2, [r3, #0]
		cmd_flag = 0;
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <idle_CommandParser+0x40>)
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	2000009c 	.word	0x2000009c
 8000310:	20000000 	.word	0x20000000
 8000314:	2000009d 	.word	0x2000009d

08000318 <find_SOC>:
void find_SOC(){
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
	uint8_t isStart = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ;i<index_buffer;i++){
 8000322:	2300      	movs	r3, #0
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	e013      	b.n	8000350 <find_SOC+0x38>
		if(buffer[i] == '!')
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <find_SOC+0x64>)
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	4413      	add	r3, r2
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b21      	cmp	r3, #33	; 0x21
 8000332:	d10a      	bne.n	800034a <find_SOC+0x32>
		{
			isStart = 1;
 8000334:	2301      	movs	r3, #1
 8000336:	71fb      	strb	r3, [r7, #7]
			start_cmd = i;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4b10      	ldr	r3, [pc, #64]	; (8000380 <find_SOC+0x68>)
 800033e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin);
 8000340:	2140      	movs	r1, #64	; 0x40
 8000342:	4810      	ldr	r0, [pc, #64]	; (8000384 <find_SOC+0x6c>)
 8000344:	f001 fbba 	bl	8001abc <HAL_GPIO_TogglePin>
			break;
 8000348:	e007      	b.n	800035a <find_SOC+0x42>
	for(int i = 0 ;i<index_buffer;i++){
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	3301      	adds	r3, #1
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <find_SOC+0x70>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	683a      	ldr	r2, [r7, #0]
 8000356:	429a      	cmp	r2, r3
 8000358:	dbe6      	blt.n	8000328 <find_SOC+0x10>
		}
	}
	if(isStart)
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d003      	beq.n	8000368 <find_SOC+0x50>
		status = FIND_EOC;
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <find_SOC+0x74>)
 8000362:	2203      	movs	r2, #3
 8000364:	601a      	str	r2, [r3, #0]
	else
	{
		status = IDLE;
		index_buffer = 0;
	}
}
 8000366:	e005      	b.n	8000374 <find_SOC+0x5c>
		status = IDLE;
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <find_SOC+0x74>)
 800036a:	2201      	movs	r2, #1
 800036c:	601a      	str	r2, [r3, #0]
		index_buffer = 0;
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <find_SOC+0x70>)
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	200000b4 	.word	0x200000b4
 8000380:	200000d3 	.word	0x200000d3
 8000384:	40010800 	.word	0x40010800
 8000388:	20000098 	.word	0x20000098
 800038c:	20000000 	.word	0x20000000

08000390 <find_EOC>:
void find_EOC(){
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
	for (int i = start_cmd ; i<index_buffer;i++){
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <find_EOC+0x64>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	e01a      	b.n	80003d4 <find_EOC+0x44>
		if(buffer[i] == '#'){
 800039e:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <find_EOC+0x68>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4413      	add	r3, r2
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b23      	cmp	r3, #35	; 0x23
 80003a8:	d107      	bne.n	80003ba <find_EOC+0x2a>
			end_cmd = i;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <find_EOC+0x6c>)
 80003b0:	701a      	strb	r2, [r3, #0]
			status = CAPTURE_DATA;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <find_EOC+0x70>)
 80003b4:	2204      	movs	r2, #4
 80003b6:	601a      	str	r2, [r3, #0]
			return;
 80003b8:	e017      	b.n	80003ea <find_EOC+0x5a>
		}
		if(buffer[i] == '!'){
 80003ba:	4a0f      	ldr	r2, [pc, #60]	; (80003f8 <find_EOC+0x68>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b21      	cmp	r3, #33	; 0x21
 80003c4:	d103      	bne.n	80003ce <find_EOC+0x3e>
			start_cmd = i;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <find_EOC+0x64>)
 80003cc:	701a      	strb	r2, [r3, #0]
	for (int i = start_cmd ; i<index_buffer;i++){
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <find_EOC+0x74>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	429a      	cmp	r2, r3
 80003dc:	dbdf      	blt.n	800039e <find_EOC+0xe>
		}
	}
	status = CAPTURE_DATA;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <find_EOC+0x70>)
 80003e0:	2204      	movs	r2, #4
 80003e2:	601a      	str	r2, [r3, #0]
	index_buffer = 0;
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <find_EOC+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
}
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	200000d3 	.word	0x200000d3
 80003f8:	200000b4 	.word	0x200000b4
 80003fc:	200000b0 	.word	0x200000b0
 8000400:	20000000 	.word	0x20000000
 8000404:	20000098 	.word	0x20000098

08000408 <capture_data>:

void capture_data(){
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
	int size = end_cmd - start_cmd -1;
 800040e:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <capture_data+0x78>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	461a      	mov	r2, r3
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <capture_data+0x7c>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	1ad3      	subs	r3, r2, r3
 800041a:	3b01      	subs	r3, #1
 800041c:	607b      	str	r3, [r7, #4]
	if(size <= 0 ){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b00      	cmp	r3, #0
 8000422:	dc03      	bgt.n	800042c <capture_data+0x24>
		status = IDLE;
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <capture_data+0x80>)
 8000426:	2201      	movs	r2, #1
 8000428:	601a      	str	r2, [r3, #0]
		return;
 800042a:	e025      	b.n	8000478 <capture_data+0x70>
	}
	int index = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
	int i = start_cmd+1;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <capture_data+0x7c>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	3301      	adds	r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
	while (index < size && i < end_cmd){
 8000438:	e009      	b.n	800044e <capture_data+0x46>
		cmd[index++] = buffer[i++];
 800043a:	68ba      	ldr	r2, [r7, #8]
 800043c:	1c53      	adds	r3, r2, #1
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	1c59      	adds	r1, r3, #1
 8000444:	60f9      	str	r1, [r7, #12]
 8000446:	4911      	ldr	r1, [pc, #68]	; (800048c <capture_data+0x84>)
 8000448:	5c89      	ldrb	r1, [r1, r2]
 800044a:	4a11      	ldr	r2, [pc, #68]	; (8000490 <capture_data+0x88>)
 800044c:	54d1      	strb	r1, [r2, r3]
	while (index < size && i < end_cmd){
 800044e:	68fa      	ldr	r2, [r7, #12]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	429a      	cmp	r2, r3
 8000454:	da05      	bge.n	8000462 <capture_data+0x5a>
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <capture_data+0x78>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	461a      	mov	r2, r3
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	4293      	cmp	r3, r2
 8000460:	dbeb      	blt.n	800043a <capture_data+0x32>
	}
	cmd[index] = '\0';
 8000462:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <capture_data+0x88>)
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	4413      	add	r3, r2
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
	cmd_flag = 1;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <capture_data+0x8c>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
	status = IDLE;
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <capture_data+0x80>)
 8000474:	2201      	movs	r2, #1
 8000476:	601a      	str	r2, [r3, #0]
}
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	200000b0 	.word	0x200000b0
 8000484:	200000d3 	.word	0x200000d3
 8000488:	20000000 	.word	0x20000000
 800048c:	200000b4 	.word	0x200000b4
 8000490:	200000d4 	.word	0x200000d4
 8000494:	2000009d 	.word	0x2000009d

08000498 <cmd_check>:

void cmd_check(){
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	if(wait_flag == 1 ){
 800049c:	4b1f      	ldr	r3, [pc, #124]	; (800051c <cmd_check+0x84>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d11b      	bne.n	80004dc <cmd_check+0x44>
		if(strcmp(cmd,"OK") == 0){
 80004a4:	491e      	ldr	r1, [pc, #120]	; (8000520 <cmd_check+0x88>)
 80004a6:	481f      	ldr	r0, [pc, #124]	; (8000524 <cmd_check+0x8c>)
 80004a8:	f7ff fe50 	bl	800014c <strcmp>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d10d      	bne.n	80004ce <cmd_check+0x36>
			HAL_GPIO_TogglePin(GPIOA, LED_BLUE_Pin);
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	481c      	ldr	r0, [pc, #112]	; (8000528 <cmd_check+0x90>)
 80004b6:	f001 fb01 	bl	8001abc <HAL_GPIO_TogglePin>
			status = IDLE;
 80004ba:	4b1c      	ldr	r3, [pc, #112]	; (800052c <cmd_check+0x94>)
 80004bc:	2201      	movs	r2, #1
 80004be:	601a      	str	r2, [r3, #0]
			wait_flag = 0;
 80004c0:	4b16      	ldr	r3, [pc, #88]	; (800051c <cmd_check+0x84>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
			num_send = 0;
 80004c6:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <cmd_check+0x98>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
 80004cc:	e002      	b.n	80004d4 <cmd_check+0x3c>
		}
		else{
			status = WAIT;
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <cmd_check+0x94>)
 80004d0:	2207      	movs	r2, #7
 80004d2:	601a      	str	r2, [r3, #0]
		}
		index_buffer = 0;
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <cmd_check+0x9c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
	}
	else{
		index_buffer = 0;
		status = IDLE;
	}
}
 80004da:	e01d      	b.n	8000518 <cmd_check+0x80>
	else if(strcmp(cmd,"RST") == 0 ){
 80004dc:	4916      	ldr	r1, [pc, #88]	; (8000538 <cmd_check+0xa0>)
 80004de:	4811      	ldr	r0, [pc, #68]	; (8000524 <cmd_check+0x8c>)
 80004e0:	f7ff fe34 	bl	800014c <strcmp>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d110      	bne.n	800050c <cmd_check+0x74>
		adc_value = rand() % 4096; // 12 bit
 80004ea:	f003 fa6b 	bl	80039c4 <rand>
 80004ee:	4603      	mov	r3, r0
 80004f0:	425a      	negs	r2, r3
 80004f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80004f6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80004fa:	bf58      	it	pl
 80004fc:	4253      	negpl	r3, r2
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <cmd_check+0xa4>)
 8000502:	701a      	strb	r2, [r3, #0]
		status = SEND_DATA;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <cmd_check+0x94>)
 8000506:	2206      	movs	r2, #6
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	e005      	b.n	8000518 <cmd_check+0x80>
		index_buffer = 0;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <cmd_check+0x9c>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
		status = IDLE;
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <cmd_check+0x94>)
 8000514:	2201      	movs	r2, #1
 8000516:	601a      	str	r2, [r3, #0]
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200000d2 	.word	0x200000d2
 8000520:	08004e00 	.word	0x08004e00
 8000524:	200000d4 	.word	0x200000d4
 8000528:	40010800 	.word	0x40010800
 800052c:	20000000 	.word	0x20000000
 8000530:	2000009f 	.word	0x2000009f
 8000534:	20000098 	.word	0x20000098
 8000538:	08004e04 	.word	0x08004e04
 800053c:	200000a0 	.word	0x200000a0

08000540 <send_data>:
void send_data(){
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
		char str[20];
		sprintf(str, "!ADC = %u#\r",adc_value);
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <send_data+0x50>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	461a      	mov	r2, r3
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4911      	ldr	r1, [pc, #68]	; (8000594 <send_data+0x54>)
 8000550:	4618      	mov	r0, r3
 8000552:	f003 fa77 	bl	8003a44 <siprintf>
		Transmit(str, 1);
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f888 	bl	8000670 <Transmit>
		index_buffer = 0;
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <send_data+0x58>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
		wait_flag = 1;
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <send_data+0x5c>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
		status = WAIT;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <send_data+0x60>)
 800056e:	2207      	movs	r2, #7
 8000570:	601a      	str	r2, [r3, #0]
		num_send ++;
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <send_data+0x64>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	3301      	adds	r3, #1
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <send_data+0x64>)
 800057c:	701a      	strb	r2, [r3, #0]
		setTimer1(0, 1000);
 800057e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000582:	2000      	movs	r0, #0
 8000584:	f000 fa2e 	bl	80009e4 <setTimer1>
}
 8000588:	bf00      	nop
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000a0 	.word	0x200000a0
 8000594:	08004e08 	.word	0x08004e08
 8000598:	20000098 	.word	0x20000098
 800059c:	200000d2 	.word	0x200000d2
 80005a0:	20000000 	.word	0x20000000
 80005a4:	2000009f 	.word	0x2000009f

080005a8 <wait_ok>:
void wait_ok(){
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	if(num_send >= 3){
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <wait_ok+0x48>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d909      	bls.n	80005c8 <wait_ok+0x20>
		status = IDLE;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <wait_ok+0x4c>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
		wait_flag = 0;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <wait_ok+0x50>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
		num_send = 0;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <wait_ok+0x48>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
			if(timer1_flag[0] == 1){
				status = SEND_DATA;
			}
		}
	}
}
 80005c6:	e00e      	b.n	80005e6 <wait_ok+0x3e>
		if(buffer_flag == 1){
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <wait_ok+0x54>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d103      	bne.n	80005d8 <wait_ok+0x30>
			status = FIND_SOC;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <wait_ok+0x4c>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	e006      	b.n	80005e6 <wait_ok+0x3e>
			if(timer1_flag[0] == 1){
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <wait_ok+0x58>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d102      	bne.n	80005e6 <wait_ok+0x3e>
				status = SEND_DATA;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <wait_ok+0x4c>)
 80005e2:	2206      	movs	r2, #6
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	2000009f 	.word	0x2000009f
 80005f4:	20000000 	.word	0x20000000
 80005f8:	200000d2 	.word	0x200000d2
 80005fc:	2000009c 	.word	0x2000009c
 8000600:	200001fc 	.word	0x200001fc

08000604 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a05      	ldr	r2, [pc, #20]	; (8000628 <HAL_UART_RxCpltCallback+0x24>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d102      	bne.n	800061c <HAL_UART_RxCpltCallback+0x18>
		receive_flag = 1;
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <HAL_UART_RxCpltCallback+0x28>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit (& huart1 , & temp1 , 1 , 50) ;
		//HAL_UART_Receive_IT (& huart2 , & temp1 , 1) ;

	}
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40004400 	.word	0x40004400
 800062c:	2000009e 	.word	0x2000009e

08000630 <Receive_IT>:

void Receive_IT(char* pData,int id){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
	switch(id){
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d003      	beq.n	8000648 <Receive_IT+0x18>
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d006      	beq.n	8000654 <Receive_IT+0x24>
		break;
	case 2:
		HAL_UART_Receive_IT(&huart2, (uint8_t*)pData, 1);
		break;
	default:
		break;
 8000646:	e00b      	b.n	8000660 <Receive_IT+0x30>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)pData, 1);
 8000648:	2201      	movs	r2, #1
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	4806      	ldr	r0, [pc, #24]	; (8000668 <Receive_IT+0x38>)
 800064e:	f002 fbca 	bl	8002de6 <HAL_UART_Receive_IT>
		break;
 8000652:	e005      	b.n	8000660 <Receive_IT+0x30>
		HAL_UART_Receive_IT(&huart2, (uint8_t*)pData, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <Receive_IT+0x3c>)
 800065a:	f002 fbc4 	bl	8002de6 <HAL_UART_Receive_IT>
		break;
 800065e:	bf00      	nop
	}
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000124 	.word	0x20000124
 800066c:	200001b4 	.word	0x200001b4

08000670 <Transmit>:

void Transmit(char* pData,int id){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	switch(id){
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d003      	beq.n	8000688 <Transmit+0x18>
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	2b02      	cmp	r3, #2
 8000684:	d00c      	beq.n	80006a0 <Transmit+0x30>
		break;
	case 2:
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, strlen(pData), HAL_MAX_DELAY);
		break;
	default:
		break;
 8000686:	e017      	b.n	80006b8 <Transmit+0x48>
		HAL_UART_Transmit(&huart1, (uint8_t*)pData, strlen(pData), HAL_MAX_DELAY);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff fd69 	bl	8000160 <strlen>
 800068e:	4603      	mov	r3, r0
 8000690:	b29a      	uxth	r2, r3
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <Transmit+0x50>)
 800069a:	f002 fb19 	bl	8002cd0 <HAL_UART_Transmit>
		break;
 800069e:	e00b      	b.n	80006b8 <Transmit+0x48>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, strlen(pData), HAL_MAX_DELAY);
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff fd5d 	bl	8000160 <strlen>
 80006a6:	4603      	mov	r3, r0
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <Transmit+0x54>)
 80006b2:	f002 fb0d 	bl	8002cd0 <HAL_UART_Transmit>
		break;
 80006b6:	bf00      	nop
	}
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000124 	.word	0x20000124
 80006c4:	200001b4 	.word	0x200001b4

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fc30 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f818 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 f944 	bl	8000960 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006d8:	f000 f864 	bl	80007a4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80006dc:	f000 f916 	bl	800090c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80006e0:	f000 f8ea 	bl	80008b8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80006e4:	f000 f89c 	bl	8000820 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <main+0x38>)
 80006ea:	f001 ff15 	bl	8002518 <HAL_TIM_Base_Start_IT>
  fsm_init();
 80006ee:	f7ff fd3f 	bl	8000170 <fsm_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  receive_data();
 80006f2:	f7ff fd55 	bl	80001a0 <receive_data>
	  CommandParser_fsm();
 80006f6:	f7ff fdaf 	bl	8000258 <CommandParser_fsm>
	  UartCommunication_fsm();
 80006fa:	f7ff fdd1 	bl	80002a0 <UartCommunication_fsm>
	  receive_data();
 80006fe:	e7f8      	b.n	80006f2 <main+0x2a>
 8000700:	2000016c 	.word	0x2000016c

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 f920 	bl	8003958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000740:	2300      	movs	r3, #0
 8000742:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f9d1 	bl	8001af0 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000754:	f000 f940 	bl	80009d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fc3c 	bl	8001ff0 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800077e:	f000 f92b 	bl	80009d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000782:	2302      	movs	r3, #2
 8000784:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fdbd 	bl	800230c <HAL_RCCEx_PeriphCLKConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000798:	f000 f91e 	bl	80009d8 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	; 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_ADC1_Init+0x74>)
 80007b6:	4a19      	ldr	r2, [pc, #100]	; (800081c <MX_ADC1_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_ADC1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_ADC1_Init+0x74>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_ADC1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_ADC1_Init+0x74>)
 80007ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_ADC1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC1_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_ADC1_Init+0x74>)
 80007e2:	f000 fc07 	bl	8000ff4 <HAL_ADC_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 f8f4 	bl	80009d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_ADC1_Init+0x74>)
 8000802:	f000 fccf 	bl	80011a4 <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800080c:	f000 f8e4 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000f4 	.word	0x200000f4
 800081c:	40012400 	.word	0x40012400

08000820 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_TIM2_Init+0x94>)
 800083e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000842:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_TIM2_Init+0x94>)
 8000846:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800084a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_TIM2_Init+0x94>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_TIM2_Init+0x94>)
 8000854:	2209      	movs	r2, #9
 8000856:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_TIM2_Init+0x94>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_TIM2_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <MX_TIM2_Init+0x94>)
 8000866:	f001 fe07 	bl	8002478 <HAL_TIM_Base_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000870:	f000 f8b2 	bl	80009d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	4619      	mov	r1, r3
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <MX_TIM2_Init+0x94>)
 8000882:	f001 ff85 	bl	8002790 <HAL_TIM_ConfigClockSource>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800088c:	f000 f8a4 	bl	80009d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_TIM2_Init+0x94>)
 800089e:	f002 f95d 	bl	8002b5c <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f000 f896 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000016c 	.word	0x2000016c

080008b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART1_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008f0:	f002 f99e 	bl	8002c30 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f86d 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000124 	.word	0x20000124
 8000908:	40013800 	.word	0x40013800

0800090c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_USART2_UART_Init+0x50>)
 8000914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000918:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800091c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000944:	f002 f974 	bl	8002c30 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800094e:	f000 f843 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200001b4 	.word	0x200001b4
 800095c:	40004400 	.word	0x40004400

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_GPIO_Init+0x5c>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a10      	ldr	r2, [pc, #64]	; (80009bc <MX_GPIO_Init+0x5c>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_GPIO_Init+0x5c>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	21e0      	movs	r1, #224	; 0xe0
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <MX_GPIO_Init+0x60>)
 8000992:	f001 f87b 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8000996:	23e0      	movs	r3, #224	; 0xe0
 8000998:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2302      	movs	r3, #2
 80009a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0x60>)
 80009ae:	f000 fef3 	bl	8001798 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800

080009c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	timerRun();
 80009cc:	f000 f828 	bl	8000a20 <timerRun>

}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <setTimer1>:
#include "software_timer.h"
	int time_cycle = 10;
	int timer1_counter[10];
	int timer1_flag[10];

	void setTimer1(int index,int duration){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
		timer1_counter[index]=duration / time_cycle;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <setTimer1+0x30>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	fb92 f2f3 	sdiv	r2, r2, r3
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <setTimer1+0x34>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer1_flag[index] = 0;
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <setTimer1+0x38>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2100      	movs	r1, #0
 8000a06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000004 	.word	0x20000004
 8000a18:	20000224 	.word	0x20000224
 8000a1c:	200001fc 	.word	0x200001fc

08000a20 <timerRun>:
	void SetTimerForTimerSet(int index,int duration,int timer_set){
		time_cycle = timer_set;
		setTimer1(index, duration);
	}
	void timerRun(){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
		for (int i = 0 ; i <10 ; i++){
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	e01c      	b.n	8000a66 <timerRun+0x46>
			if(timer1_counter[i] >  0 ){
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <timerRun+0x58>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	dd08      	ble.n	8000a4a <timerRun+0x2a>
					timer1_counter[i]--;
 8000a38:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <timerRun+0x58>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a40:	1e5a      	subs	r2, r3, #1
 8000a42:	490d      	ldr	r1, [pc, #52]	; (8000a78 <timerRun+0x58>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 }
			if(timer1_counter[i]<=0){
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <timerRun+0x58>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	dc04      	bgt.n	8000a60 <timerRun+0x40>
					timer1_flag[i]=1;
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <timerRun+0x5c>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0 ; i <10 ; i++){
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3301      	adds	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b09      	cmp	r3, #9
 8000a6a:	dddf      	ble.n	8000a2c <timerRun+0xc>
			}
		}


	}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	20000224 	.word	0x20000224
 8000a7c:	200001fc 	.word	0x200001fc

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_MspInit+0x5c>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <HAL_MspInit+0x5c>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_MspInit+0x5c>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_MspInit+0x5c>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_MspInit+0x5c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	61d3      	str	r3, [r2, #28]
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_MspInit+0x5c>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_MspInit+0x60>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_MspInit+0x60>)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <HAL_ADC_MspInit+0x6c>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d121      	bne.n	8000b48 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <HAL_ADC_MspInit+0x70>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <HAL_ADC_MspInit+0x70>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_ADC_MspInit+0x70>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_ADC_MspInit+0x70>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <HAL_ADC_MspInit+0x70>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_ADC_MspInit+0x70>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b34:	2301      	movs	r3, #1
 8000b36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <HAL_ADC_MspInit+0x74>)
 8000b44:	f000 fe28 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40012400 	.word	0x40012400
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010800 	.word	0x40010800

08000b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b6c:	d113      	bne.n	8000b96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_TIM_Base_MspInit+0x44>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <HAL_TIM_Base_MspInit+0x44>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_TIM_Base_MspInit+0x44>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	201c      	movs	r0, #28
 8000b8c:	f000 fd1b 	bl	80015c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b90:	201c      	movs	r0, #28
 8000b92:	f000 fd34 	bl	80015fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a3f      	ldr	r2, [pc, #252]	; (8000cbc <HAL_UART_MspInit+0x118>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d13a      	bne.n	8000c3a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc4:	4b3e      	ldr	r3, [pc, #248]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a3d      	ldr	r2, [pc, #244]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b3b      	ldr	r3, [pc, #236]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a37      	ldr	r2, [pc, #220]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	4619      	mov	r1, r3
 8000c08:	482e      	ldr	r0, [pc, #184]	; (8000cc4 <HAL_UART_MspInit+0x120>)
 8000c0a:	f000 fdc5 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4828      	ldr	r0, [pc, #160]	; (8000cc4 <HAL_UART_MspInit+0x120>)
 8000c24:	f000 fdb8 	bl	8001798 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2025      	movs	r0, #37	; 0x25
 8000c2e:	f000 fcca 	bl	80015c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c32:	2025      	movs	r0, #37	; 0x25
 8000c34:	f000 fce3 	bl	80015fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c38:	e03c      	b.n	8000cb4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <HAL_UART_MspInit+0x124>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d137      	bne.n	8000cb4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	4a1d      	ldr	r2, [pc, #116]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4e:	61d3      	str	r3, [r2, #28]
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000c52:	69db      	ldr	r3, [r3, #28]
 8000c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c74:	2304      	movs	r3, #4
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0318 	add.w	r3, r7, #24
 8000c84:	4619      	mov	r1, r3
 8000c86:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <HAL_UART_MspInit+0x120>)
 8000c88:	f000 fd86 	bl	8001798 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 0318 	add.w	r3, r7, #24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <HAL_UART_MspInit+0x120>)
 8000ca0:	f000 fd7a 	bl	8001798 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2026      	movs	r0, #38	; 0x26
 8000caa:	f000 fc8c 	bl	80015c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cae:	2026      	movs	r0, #38	; 0x26
 8000cb0:	f000 fca5 	bl	80015fe <HAL_NVIC_EnableIRQ>
}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	; 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40013800 	.word	0x40013800
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010800 	.word	0x40010800
 8000cc8:	40004400 	.word	0x40004400

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d12:	f000 f953 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <TIM2_IRQHandler+0x10>)
 8000d22:	f001 fc45 	bl	80025b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000016c 	.word	0x2000016c

08000d30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <USART1_IRQHandler+0x10>)
 8000d36:	f002 f87b 	bl	8002e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000124 	.word	0x20000124

08000d44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <USART2_IRQHandler+0x10>)
 8000d4a:	f002 f871 	bl	8002e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200001b4 	.word	0x200001b4

08000d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	return 1;
 8000d5c:	2301      	movs	r3, #1
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <_kill>:

int _kill(int pid, int sig)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d70:	f002 fdc8 	bl	8003904 <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2216      	movs	r2, #22
 8000d78:	601a      	str	r2, [r3, #0]
	return -1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_exit>:

void _exit (int status)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffe7 	bl	8000d66 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d98:	e7fe      	b.n	8000d98 <_exit+0x12>

08000d9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	e00a      	b.n	8000dc2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dac:	f3af 8000 	nop.w
 8000db0:	4601      	mov	r1, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	60ba      	str	r2, [r7, #8]
 8000db8:	b2ca      	uxtb	r2, r1
 8000dba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	dbf0      	blt.n	8000dac <_read+0x12>
	}

return len;
 8000dca:	687b      	ldr	r3, [r7, #4]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	e009      	b.n	8000dfa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	60ba      	str	r2, [r7, #8]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dbf1      	blt.n	8000de6 <_write+0x12>
	}
	return len;
 8000e02:	687b      	ldr	r3, [r7, #4]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <_close>:

int _close(int file)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	return -1;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e32:	605a      	str	r2, [r3, #4]
	return 0;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e74:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <_sbrk+0x5c>)
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <_sbrk+0x60>)
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <_sbrk+0x64>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <_sbrk+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d207      	bcs.n	8000eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e9c:	f002 fd32 	bl	8003904 <__errno>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	e009      	b.n	8000ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <_sbrk+0x64>)
 8000ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20002800 	.word	0x20002800
 8000ecc:	00000400 	.word	0x00000400
 8000ed0:	200000a4 	.word	0x200000a4
 8000ed4:	20000260 	.word	0x20000260

08000ed8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee4:	f7ff fff8 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eea:	490c      	ldr	r1, [pc, #48]	; (8000f1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f00:	4c09      	ldr	r4, [pc, #36]	; (8000f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f002 fcff 	bl	8003910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f12:	f7ff fbd9 	bl	80006c8 <main>
  bx lr
 8000f16:	4770      	bx	lr
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f20:	08004f94 	.word	0x08004f94
  ldr r2, =_sbss
 8000f24:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f28:	20000260 	.word	0x20000260

08000f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_2_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_Init+0x28>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_Init+0x28>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 fb35 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	200f      	movs	r0, #15
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fd98 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40022000 	.word	0x40022000

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fb4d 	bl	800161a <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 fb15 	bl	80015c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000010 	.word	0x20000010
 8000fb8:	2000000c 	.word	0x2000000c

08000fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x1c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <HAL_IncTick+0x20>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	20000010 	.word	0x20000010
 8000fdc:	2000024c 	.word	0x2000024c

08000fe0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <HAL_GetTick+0x10>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	2000024c 	.word	0x2000024c

08000ff4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e0be      	b.n	8001194 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	2b00      	cmp	r3, #0
 8001022:	d109      	bne.n	8001038 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fd56 	bl	8000ae4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f9ab 	bl	8001394 <ADC_ConversionStop_Disable>
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	f040 8099 	bne.w	8001182 <HAL_ADC_Init+0x18e>
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f040 8095 	bne.w	8001182 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001060:	f023 0302 	bic.w	r3, r3, #2
 8001064:	f043 0202 	orr.w	r2, r3, #2
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001074:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7b1b      	ldrb	r3, [r3, #12]
 800107a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800107c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	4313      	orrs	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800108c:	d003      	beq.n	8001096 <HAL_ADC_Init+0xa2>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d102      	bne.n	800109c <HAL_ADC_Init+0xa8>
 8001096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109a:	e000      	b.n	800109e <HAL_ADC_Init+0xaa>
 800109c:	2300      	movs	r3, #0
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7d1b      	ldrb	r3, [r3, #20]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d119      	bne.n	80010e0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7b1b      	ldrb	r3, [r3, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d109      	bne.n	80010c8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	035a      	lsls	r2, r3, #13
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	e00b      	b.n	80010e0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	f043 0220 	orr.w	r2, r3, #32
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_ADC_Init+0x1a8>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	430b      	orrs	r3, r1
 8001106:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001110:	d003      	beq.n	800111a <HAL_ADC_Init+0x126>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d104      	bne.n	8001124 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	3b01      	subs	r3, #1
 8001120:	051b      	lsls	r3, r3, #20
 8001122:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	430a      	orrs	r2, r1
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_ADC_Init+0x1ac>)
 8001140:	4013      	ands	r3, r2
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	429a      	cmp	r2, r3
 8001146:	d10b      	bne.n	8001160 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001152:	f023 0303 	bic.w	r3, r3, #3
 8001156:	f043 0201 	orr.w	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800115e:	e018      	b.n	8001192 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	f023 0312 	bic.w	r3, r3, #18
 8001168:	f043 0210 	orr.w	r2, r3, #16
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	f043 0201 	orr.w	r2, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001180:	e007      	b.n	8001192 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001186:	f043 0210 	orr.w	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001192:	7dfb      	ldrb	r3, [r7, #23]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	ffe1f7fd 	.word	0xffe1f7fd
 80011a0:	ff1f0efe 	.word	0xff1f0efe

080011a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x20>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e0dc      	b.n	800137e <HAL_ADC_ConfigChannel+0x1da>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b06      	cmp	r3, #6
 80011d2:	d81c      	bhi.n	800120e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3b05      	subs	r3, #5
 80011e6:	221f      	movs	r2, #31
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4019      	ands	r1, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	3b05      	subs	r3, #5
 8001200:	fa00 f203 	lsl.w	r2, r0, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
 800120c:	e03c      	b.n	8001288 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b0c      	cmp	r3, #12
 8001214:	d81c      	bhi.n	8001250 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	3b23      	subs	r3, #35	; 0x23
 8001228:	221f      	movs	r2, #31
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	4019      	ands	r1, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	3b23      	subs	r3, #35	; 0x23
 8001242:	fa00 f203 	lsl.w	r2, r0, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	631a      	str	r2, [r3, #48]	; 0x30
 800124e:	e01b      	b.n	8001288 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3b41      	subs	r3, #65	; 0x41
 8001262:	221f      	movs	r2, #31
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	4019      	ands	r1, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	3b41      	subs	r3, #65	; 0x41
 800127c:	fa00 f203 	lsl.w	r2, r0, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b09      	cmp	r3, #9
 800128e:	d91c      	bls.n	80012ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68d9      	ldr	r1, [r3, #12]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	3b1e      	subs	r3, #30
 80012a2:	2207      	movs	r2, #7
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4019      	ands	r1, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	6898      	ldr	r0, [r3, #8]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	3b1e      	subs	r3, #30
 80012bc:	fa00 f203 	lsl.w	r2, r0, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	e019      	b.n	80012fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6919      	ldr	r1, [r3, #16]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	2207      	movs	r2, #7
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	4019      	ands	r1, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	6898      	ldr	r0, [r3, #8]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	fa00 f203 	lsl.w	r2, r0, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b10      	cmp	r3, #16
 8001304:	d003      	beq.n	800130e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800130a:	2b11      	cmp	r3, #17
 800130c:	d132      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <HAL_ADC_ConfigChannel+0x1e4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d125      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d126      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001334:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b10      	cmp	r3, #16
 800133c:	d11a      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_ADC_ConfigChannel+0x1e8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <HAL_ADC_ConfigChannel+0x1ec>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	0c9a      	lsrs	r2, r3, #18
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001354:	e002      	b.n	800135c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3b01      	subs	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f9      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x1b2>
 8001362:	e007      	b.n	8001374 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	f043 0220 	orr.w	r2, r3, #32
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40012400 	.word	0x40012400
 800138c:	20000008 	.word	0x20000008
 8001390:	431bde83 	.word	0x431bde83

08001394 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d12e      	bne.n	800140c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0201 	bic.w	r2, r2, #1
 80013bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013be:	f7ff fe0f 	bl	8000fe0 <HAL_GetTick>
 80013c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013c4:	e01b      	b.n	80013fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013c6:	f7ff fe0b 	bl	8000fe0 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d914      	bls.n	80013fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d10d      	bne.n	80013fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	f043 0210 	orr.w	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	f043 0201 	orr.w	r2, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e007      	b.n	800140e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b01      	cmp	r3, #1
 800140a:	d0dc      	beq.n	80013c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	60d3      	str	r3, [r2, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4906      	ldr	r1, [pc, #24]	; (80014b0 <__NVIC_EnableIRQ+0x34>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800157c:	d301      	bcc.n	8001582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157e:	2301      	movs	r3, #1
 8001580:	e00f      	b.n	80015a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <SysTick_Config+0x40>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158a:	210f      	movs	r1, #15
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f7ff ff90 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SysTick_Config+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SysTick_Config+0x40>)
 800159c:	2207      	movs	r2, #7
 800159e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff2d 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d8:	f7ff ff42 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff ff90 	bl	8001508 <NVIC_EncodePriority>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff5f 	bl	80014b4 <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff35 	bl	800147c <__NVIC_EnableIRQ>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffa2 	bl	800156c <SysTick_Config>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001632:	b480      	push	{r7}
 8001634:	b085      	sub	sp, #20
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d008      	beq.n	800165c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2204      	movs	r2, #4
 800164e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e020      	b.n	800169e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 020e 	bic.w	r2, r2, #14
 800166a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001684:	2101      	movs	r1, #1
 8001686:	fa01 f202 	lsl.w	r2, r1, r2
 800168a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d005      	beq.n	80016cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2204      	movs	r2, #4
 80016c4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	e051      	b.n	8001770 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 020e 	bic.w	r2, r2, #14
 80016da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_DMA_Abort_IT+0xd4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d029      	beq.n	800174a <HAL_DMA_Abort_IT+0xa2>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a21      	ldr	r2, [pc, #132]	; (8001780 <HAL_DMA_Abort_IT+0xd8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d022      	beq.n	8001746 <HAL_DMA_Abort_IT+0x9e>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a1f      	ldr	r2, [pc, #124]	; (8001784 <HAL_DMA_Abort_IT+0xdc>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01a      	beq.n	8001740 <HAL_DMA_Abort_IT+0x98>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <HAL_DMA_Abort_IT+0xe0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d012      	beq.n	800173a <HAL_DMA_Abort_IT+0x92>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a1c      	ldr	r2, [pc, #112]	; (800178c <HAL_DMA_Abort_IT+0xe4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00a      	beq.n	8001734 <HAL_DMA_Abort_IT+0x8c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <HAL_DMA_Abort_IT+0xe8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d102      	bne.n	800172e <HAL_DMA_Abort_IT+0x86>
 8001728:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800172c:	e00e      	b.n	800174c <HAL_DMA_Abort_IT+0xa4>
 800172e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001732:	e00b      	b.n	800174c <HAL_DMA_Abort_IT+0xa4>
 8001734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001738:	e008      	b.n	800174c <HAL_DMA_Abort_IT+0xa4>
 800173a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173e:	e005      	b.n	800174c <HAL_DMA_Abort_IT+0xa4>
 8001740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001744:	e002      	b.n	800174c <HAL_DMA_Abort_IT+0xa4>
 8001746:	2310      	movs	r3, #16
 8001748:	e000      	b.n	800174c <HAL_DMA_Abort_IT+0xa4>
 800174a:	2301      	movs	r3, #1
 800174c:	4a11      	ldr	r2, [pc, #68]	; (8001794 <HAL_DMA_Abort_IT+0xec>)
 800174e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	4798      	blx	r3
    } 
  }
  return status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40020008 	.word	0x40020008
 8001780:	4002001c 	.word	0x4002001c
 8001784:	40020030 	.word	0x40020030
 8001788:	40020044 	.word	0x40020044
 800178c:	40020058 	.word	0x40020058
 8001790:	4002006c 	.word	0x4002006c
 8001794:	40020000 	.word	0x40020000

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017aa:	e148      	b.n	8001a3e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017ac:	2201      	movs	r2, #1
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	f040 8137 	bne.w	8001a38 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4aa3      	ldr	r2, [pc, #652]	; (8001a5c <HAL_GPIO_Init+0x2c4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d05e      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017d4:	4aa1      	ldr	r2, [pc, #644]	; (8001a5c <HAL_GPIO_Init+0x2c4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d875      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017da:	4aa1      	ldr	r2, [pc, #644]	; (8001a60 <HAL_GPIO_Init+0x2c8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d058      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017e0:	4a9f      	ldr	r2, [pc, #636]	; (8001a60 <HAL_GPIO_Init+0x2c8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d86f      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017e6:	4a9f      	ldr	r2, [pc, #636]	; (8001a64 <HAL_GPIO_Init+0x2cc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d052      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017ec:	4a9d      	ldr	r2, [pc, #628]	; (8001a64 <HAL_GPIO_Init+0x2cc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d869      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017f2:	4a9d      	ldr	r2, [pc, #628]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d04c      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017f8:	4a9b      	ldr	r2, [pc, #620]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d863      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017fe:	4a9b      	ldr	r2, [pc, #620]	; (8001a6c <HAL_GPIO_Init+0x2d4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d046      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 8001804:	4a99      	ldr	r2, [pc, #612]	; (8001a6c <HAL_GPIO_Init+0x2d4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d85d      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 800180a:	2b12      	cmp	r3, #18
 800180c:	d82a      	bhi.n	8001864 <HAL_GPIO_Init+0xcc>
 800180e:	2b12      	cmp	r3, #18
 8001810:	d859      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 8001812:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <HAL_GPIO_Init+0x80>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001893 	.word	0x08001893
 800181c:	0800186d 	.word	0x0800186d
 8001820:	0800187f 	.word	0x0800187f
 8001824:	080018c1 	.word	0x080018c1
 8001828:	080018c7 	.word	0x080018c7
 800182c:	080018c7 	.word	0x080018c7
 8001830:	080018c7 	.word	0x080018c7
 8001834:	080018c7 	.word	0x080018c7
 8001838:	080018c7 	.word	0x080018c7
 800183c:	080018c7 	.word	0x080018c7
 8001840:	080018c7 	.word	0x080018c7
 8001844:	080018c7 	.word	0x080018c7
 8001848:	080018c7 	.word	0x080018c7
 800184c:	080018c7 	.word	0x080018c7
 8001850:	080018c7 	.word	0x080018c7
 8001854:	080018c7 	.word	0x080018c7
 8001858:	080018c7 	.word	0x080018c7
 800185c:	08001875 	.word	0x08001875
 8001860:	08001889 	.word	0x08001889
 8001864:	4a82      	ldr	r2, [pc, #520]	; (8001a70 <HAL_GPIO_Init+0x2d8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800186a:	e02c      	b.n	80018c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	623b      	str	r3, [r7, #32]
          break;
 8001872:	e029      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	3304      	adds	r3, #4
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e024      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	3308      	adds	r3, #8
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e01f      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	330c      	adds	r3, #12
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e01a      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800189a:	2304      	movs	r3, #4
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e013      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a8:	2308      	movs	r3, #8
 80018aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	611a      	str	r2, [r3, #16]
          break;
 80018b2:	e009      	b.n	80018c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b4:	2308      	movs	r3, #8
 80018b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	615a      	str	r2, [r3, #20]
          break;
 80018be:	e003      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          break;
 80018c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d801      	bhi.n	80018d2 <HAL_GPIO_Init+0x13a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	e001      	b.n	80018d6 <HAL_GPIO_Init+0x13e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3304      	adds	r3, #4
 80018d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d802      	bhi.n	80018e4 <HAL_GPIO_Init+0x14c>
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	e002      	b.n	80018ea <HAL_GPIO_Init+0x152>
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	3b08      	subs	r3, #8
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	210f      	movs	r1, #15
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	6a39      	ldr	r1, [r7, #32]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	431a      	orrs	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8090 	beq.w	8001a38 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001918:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a55      	ldr	r2, [pc, #340]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001930:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a49      	ldr	r2, [pc, #292]	; (8001a7c <HAL_GPIO_Init+0x2e4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d00d      	beq.n	8001978 <HAL_GPIO_Init+0x1e0>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a48      	ldr	r2, [pc, #288]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d007      	beq.n	8001974 <HAL_GPIO_Init+0x1dc>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a47      	ldr	r2, [pc, #284]	; (8001a84 <HAL_GPIO_Init+0x2ec>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_GPIO_Init+0x1d8>
 800196c:	2302      	movs	r3, #2
 800196e:	e004      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001970:	2303      	movs	r3, #3
 8001972:	e002      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001978:	2300      	movs	r3, #0
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	f002 0203 	and.w	r2, r2, #3
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	4093      	lsls	r3, r2
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800198a:	493b      	ldr	r1, [pc, #236]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019a4:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	4937      	ldr	r1, [pc, #220]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019b2:	4b35      	ldr	r3, [pc, #212]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4933      	ldr	r1, [pc, #204]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019bc:	4013      	ands	r3, r2
 80019be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	492d      	ldr	r1, [pc, #180]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019da:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4929      	ldr	r1, [pc, #164]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4923      	ldr	r1, [pc, #140]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	491f      	ldr	r1, [pc, #124]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4919      	ldr	r1, [pc, #100]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4915      	ldr	r1, [pc, #84]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f47f aeaf 	bne.w	80017ac <HAL_GPIO_Init+0x14>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	372c      	adds	r7, #44	; 0x2c
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	10320000 	.word	0x10320000
 8001a60:	10310000 	.word	0x10310000
 8001a64:	10220000 	.word	0x10220000
 8001a68:	10210000 	.word	0x10210000
 8001a6c:	10120000 	.word	0x10120000
 8001a70:	10110000 	.word	0x10110000
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	40010800 	.word	0x40010800
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	40011000 	.word	0x40011000
 8001a88:	40010400 	.word	0x40010400

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	041a      	lsls	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	611a      	str	r2, [r3, #16]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43d9      	mvns	r1, r3
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	400b      	ands	r3, r1
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	611a      	str	r2, [r3, #16]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e26c      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8087 	beq.w	8001c1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b10:	4b92      	ldr	r3, [pc, #584]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d00c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b1c:	4b8f      	ldr	r3, [pc, #572]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d112      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5e>
 8001b28:	4b8c      	ldr	r3, [pc, #560]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b34:	d10b      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b36:	4b89      	ldr	r3, [pc, #548]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d06c      	beq.n	8001c1c <HAL_RCC_OscConfig+0x12c>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d168      	bne.n	8001c1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e246      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x76>
 8001b58:	4b80      	ldr	r3, [pc, #512]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a7f      	ldr	r2, [pc, #508]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e02e      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x98>
 8001b6e:	4b7b      	ldr	r3, [pc, #492]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7a      	ldr	r2, [pc, #488]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b78      	ldr	r3, [pc, #480]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a77      	ldr	r2, [pc, #476]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e01d      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0xbc>
 8001b92:	4b72      	ldr	r3, [pc, #456]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a71      	ldr	r2, [pc, #452]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b6f      	ldr	r3, [pc, #444]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a6e      	ldr	r2, [pc, #440]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001bac:	4b6b      	ldr	r3, [pc, #428]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a6a      	ldr	r2, [pc, #424]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b68      	ldr	r3, [pc, #416]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a67      	ldr	r2, [pc, #412]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fa08 	bl	8000fe0 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fa04 	bl	8000fe0 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1fa      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b5d      	ldr	r3, [pc, #372]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0xe4>
 8001bf2:	e014      	b.n	8001c1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f9f4 	bl	8000fe0 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f9f0 	bl	8000fe0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1e6      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x10c>
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d063      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2a:	4b4c      	ldr	r3, [pc, #304]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00b      	beq.n	8001c4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c36:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d11c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x18c>
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d116      	bne.n	8001c7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_RCC_OscConfig+0x176>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e1ba      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4939      	ldr	r1, [pc, #228]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	e03a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c84:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f9a9 	bl	8000fe0 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c92:	f7ff f9a5 	bl	8000fe0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e19b      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4927      	ldr	r1, [pc, #156]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
 8001cc4:	e015      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f988 	bl	8000fe0 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f984 	bl	8000fe0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e17a      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d03a      	beq.n	8001d74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d019      	beq.n	8001d3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_RCC_OscConfig+0x274>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f968 	bl	8000fe0 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff f964 	bl	8000fe0 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e15a      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f000 facc 	bl	80022d0 <RCC_Delay>
 8001d38:	e01c      	b.n	8001d74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7ff f94e 	bl	8000fe0 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d46:	e00f      	b.n	8001d68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7ff f94a 	bl	8000fe0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d908      	bls.n	8001d68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e140      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	42420000 	.word	0x42420000
 8001d64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	4b9e      	ldr	r3, [pc, #632]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e9      	bne.n	8001d48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80a6 	beq.w	8001ece <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d86:	4b97      	ldr	r3, [pc, #604]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10d      	bne.n	8001dae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	4b94      	ldr	r3, [pc, #592]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a93      	ldr	r2, [pc, #588]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	61d3      	str	r3, [r2, #28]
 8001d9e:	4b91      	ldr	r3, [pc, #580]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001daa:	2301      	movs	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	4b8e      	ldr	r3, [pc, #568]	; (8001fe8 <HAL_RCC_OscConfig+0x4f8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d118      	bne.n	8001dec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dba:	4b8b      	ldr	r3, [pc, #556]	; (8001fe8 <HAL_RCC_OscConfig+0x4f8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a8a      	ldr	r2, [pc, #552]	; (8001fe8 <HAL_RCC_OscConfig+0x4f8>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff f90b 	bl	8000fe0 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dce:	f7ff f907 	bl	8000fe0 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	; 0x64
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e0fd      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	4b81      	ldr	r3, [pc, #516]	; (8001fe8 <HAL_RCC_OscConfig+0x4f8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x312>
 8001df4:	4b7b      	ldr	r3, [pc, #492]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a7a      	ldr	r2, [pc, #488]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6213      	str	r3, [r2, #32]
 8001e00:	e02d      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x334>
 8001e0a:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a75      	ldr	r2, [pc, #468]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6213      	str	r3, [r2, #32]
 8001e16:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a72      	ldr	r2, [pc, #456]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	6213      	str	r3, [r2, #32]
 8001e22:	e01c      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d10c      	bne.n	8001e46 <HAL_RCC_OscConfig+0x356>
 8001e2c:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a6c      	ldr	r2, [pc, #432]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	6213      	str	r3, [r2, #32]
 8001e38:	4b6a      	ldr	r3, [pc, #424]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4a69      	ldr	r2, [pc, #420]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6213      	str	r3, [r2, #32]
 8001e44:	e00b      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e46:	4b67      	ldr	r3, [pc, #412]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a66      	ldr	r2, [pc, #408]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a63      	ldr	r2, [pc, #396]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d015      	beq.n	8001e92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff f8bb 	bl	8000fe0 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7ff f8b7 	bl	8000fe0 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e0ab      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	4b57      	ldr	r3, [pc, #348]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0ee      	beq.n	8001e6e <HAL_RCC_OscConfig+0x37e>
 8001e90:	e014      	b.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7ff f8a5 	bl	8000fe0 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7ff f8a1 	bl	8000fe0 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e095      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1ee      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4b48      	ldr	r3, [pc, #288]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a47      	ldr	r2, [pc, #284]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8081 	beq.w	8001fda <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed8:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d061      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d146      	bne.n	8001f7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eec:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCC_OscConfig+0x4fc>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7ff f875 	bl	8000fe0 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7ff f871 	bl	8000fe0 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e067      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0c:	4b35      	ldr	r3, [pc, #212]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d108      	bne.n	8001f34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f22:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	492d      	ldr	r1, [pc, #180]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a19      	ldr	r1, [r3, #32]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	430b      	orrs	r3, r1
 8001f46:	4927      	ldr	r1, [pc, #156]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_RCC_OscConfig+0x4fc>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff f845 	bl	8000fe0 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7ff f841 	bl	8000fe0 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e037      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x46a>
 8001f78:	e02f      	b.n	8001fda <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <HAL_RCC_OscConfig+0x4fc>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff f82e 	bl	8000fe0 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff f82a 	bl	8000fe0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e020      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x498>
 8001fa6:	e018      	b.n	8001fda <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e013      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	42420060 	.word	0x42420060

08001ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0d0      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b6a      	ldr	r3, [pc, #424]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d910      	bls.n	8002034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b67      	ldr	r3, [pc, #412]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 0207 	bic.w	r2, r3, #7
 800201a:	4965      	ldr	r1, [pc, #404]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b63      	ldr	r3, [pc, #396]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0b8      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800204c:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a58      	ldr	r2, [pc, #352]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002056:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002064:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a52      	ldr	r2, [pc, #328]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800206e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002070:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	494d      	ldr	r1, [pc, #308]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d040      	beq.n	8002110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d115      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e07f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e073      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06b      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4936      	ldr	r1, [pc, #216]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7fe ff7e 	bl	8000fe0 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7fe ff7a 	bl	8000fe0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e053      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d210      	bcs.n	8002140 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 0207 	bic.w	r2, r3, #7
 8002126:	4922      	ldr	r1, [pc, #136]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e032      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4916      	ldr	r1, [pc, #88]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	490e      	ldr	r1, [pc, #56]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800217e:	f000 f821 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002182:	4602      	mov	r2, r0
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	490a      	ldr	r1, [pc, #40]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002190:	5ccb      	ldrb	r3, [r1, r3]
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1cc>)
 8002198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1d0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fedc 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40022000 	.word	0x40022000
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08004e14 	.word	0x08004e14
 80021bc:	20000008 	.word	0x20000008
 80021c0:	2000000c 	.word	0x2000000c

080021c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <HAL_RCC_GetSysClockFreq+0x94>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d002      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x30>
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0x36>
 80021f2:	e027      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_RCC_GetSysClockFreq+0x98>)
 80021f6:	613b      	str	r3, [r7, #16]
      break;
 80021f8:	e027      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	0c9b      	lsrs	r3, r3, #18
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	4a17      	ldr	r2, [pc, #92]	; (8002260 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002204:	5cd3      	ldrb	r3, [r2, r3]
 8002206:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d010      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_RCC_GetSysClockFreq+0x94>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	0c5b      	lsrs	r3, r3, #17
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	4a11      	ldr	r2, [pc, #68]	; (8002264 <HAL_RCC_GetSysClockFreq+0xa0>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_RCC_GetSysClockFreq+0x98>)
 8002226:	fb02 f203 	mul.w	r2, r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e004      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002238:	fb02 f303 	mul.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	613b      	str	r3, [r7, #16]
      break;
 8002242:	e002      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetSysClockFreq+0x98>)
 8002246:	613b      	str	r3, [r7, #16]
      break;
 8002248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224a:	693b      	ldr	r3, [r7, #16]
}
 800224c:	4618      	mov	r0, r3
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	007a1200 	.word	0x007a1200
 8002260:	08004e2c 	.word	0x08004e2c
 8002264:	08004e3c 	.word	0x08004e3c
 8002268:	003d0900 	.word	0x003d0900

0800226c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <HAL_RCC_GetHCLKFreq+0x10>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	20000008 	.word	0x20000008

08002280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002284:	f7ff fff2 	bl	800226c <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4903      	ldr	r1, [pc, #12]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	08004e24 	.word	0x08004e24

080022a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022ac:	f7ff ffde 	bl	800226c <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	0adb      	lsrs	r3, r3, #11
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	4903      	ldr	r1, [pc, #12]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08004e24 	.word	0x08004e24

080022d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <RCC_Delay+0x34>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <RCC_Delay+0x38>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0a5b      	lsrs	r3, r3, #9
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022ec:	bf00      	nop
  }
  while (Delay --);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1e5a      	subs	r2, r3, #1
 80022f2:	60fa      	str	r2, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f9      	bne.n	80022ec <RCC_Delay+0x1c>
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	20000008 	.word	0x20000008
 8002308:	10624dd3 	.word	0x10624dd3

0800230c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d07d      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002328:	2300      	movs	r3, #0
 800232a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232c:	4b4f      	ldr	r3, [pc, #316]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10d      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002338:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	4a4b      	ldr	r2, [pc, #300]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002342:	61d3      	str	r3, [r2, #28]
 8002344:	4b49      	ldr	r3, [pc, #292]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002350:	2301      	movs	r3, #1
 8002352:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	4b46      	ldr	r3, [pc, #280]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d118      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002360:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a42      	ldr	r2, [pc, #264]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236c:	f7fe fe38 	bl	8000fe0 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	e008      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002374:	f7fe fe34 	bl	8000fe0 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e06d      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002392:	4b36      	ldr	r3, [pc, #216]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d02e      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d027      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023b0:	4b2e      	ldr	r3, [pc, #184]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ba:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023c0:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023c6:	4a29      	ldr	r2, [pc, #164]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d014      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe fe03 	bl	8000fe0 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7fe fdff 	bl	8000fe0 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e036      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ee      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4917      	ldr	r1, [pc, #92]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240e:	4313      	orrs	r3, r2
 8002410:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4a13      	ldr	r2, [pc, #76]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002422:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002430:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	490b      	ldr	r1, [pc, #44]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	4904      	ldr	r1, [pc, #16]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	40007000 	.word	0x40007000
 8002474:	42420440 	.word	0x42420440

08002478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e041      	b.n	800250e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fb5c 	bl	8000b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3304      	adds	r3, #4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f000 fa56 	bl	8002968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d001      	beq.n	8002530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e035      	b.n	800259c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <HAL_TIM_Base_Start_IT+0x90>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d009      	beq.n	8002566 <HAL_TIM_Base_Start_IT+0x4e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255a:	d004      	beq.n	8002566 <HAL_TIM_Base_Start_IT+0x4e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a12      	ldr	r2, [pc, #72]	; (80025ac <HAL_TIM_Base_Start_IT+0x94>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d111      	bne.n	800258a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b06      	cmp	r3, #6
 8002576:	d010      	beq.n	800259a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002588:	e007      	b.n	800259a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40000400 	.word	0x40000400

080025b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d020      	beq.n	8002614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0202 	mvn.w	r2, #2
 80025e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f998 	bl	8002930 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f98b 	bl	800291e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f99a 	bl	8002942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d020      	beq.n	8002660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0204 	mvn.w	r2, #4
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2202      	movs	r2, #2
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f972 	bl	8002930 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f965 	bl	800291e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f974 	bl	8002942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d020      	beq.n	80026ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01b      	beq.n	80026ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0208 	mvn.w	r2, #8
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2204      	movs	r2, #4
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f94c 	bl	8002930 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f93f 	bl	800291e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f94e 	bl	8002942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d020      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01b      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0210 	mvn.w	r2, #16
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2208      	movs	r2, #8
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f926 	bl	8002930 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f919 	bl	800291e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f928 	bl	8002942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0201 	mvn.w	r2, #1
 8002714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe f954 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fa6f 	bl	8002c1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f8f8 	bl	8002954 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0220 	mvn.w	r2, #32
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fa42 	bl	8002c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_TIM_ConfigClockSource+0x1c>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e0b4      	b.n	8002916 <HAL_TIM_ConfigClockSource+0x186>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e4:	d03e      	beq.n	8002864 <HAL_TIM_ConfigClockSource+0xd4>
 80027e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ea:	f200 8087 	bhi.w	80028fc <HAL_TIM_ConfigClockSource+0x16c>
 80027ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f2:	f000 8086 	beq.w	8002902 <HAL_TIM_ConfigClockSource+0x172>
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fa:	d87f      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x16c>
 80027fc:	2b70      	cmp	r3, #112	; 0x70
 80027fe:	d01a      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0xa6>
 8002800:	2b70      	cmp	r3, #112	; 0x70
 8002802:	d87b      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x16c>
 8002804:	2b60      	cmp	r3, #96	; 0x60
 8002806:	d050      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x11a>
 8002808:	2b60      	cmp	r3, #96	; 0x60
 800280a:	d877      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x16c>
 800280c:	2b50      	cmp	r3, #80	; 0x50
 800280e:	d03c      	beq.n	800288a <HAL_TIM_ConfigClockSource+0xfa>
 8002810:	2b50      	cmp	r3, #80	; 0x50
 8002812:	d873      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x16c>
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d058      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0x13a>
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d86f      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x16c>
 800281c:	2b30      	cmp	r3, #48	; 0x30
 800281e:	d064      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x15a>
 8002820:	2b30      	cmp	r3, #48	; 0x30
 8002822:	d86b      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x16c>
 8002824:	2b20      	cmp	r3, #32
 8002826:	d060      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x15a>
 8002828:	2b20      	cmp	r3, #32
 800282a:	d867      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x16c>
 800282c:	2b00      	cmp	r3, #0
 800282e:	d05c      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x15a>
 8002830:	2b10      	cmp	r3, #16
 8002832:	d05a      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x15a>
 8002834:	e062      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6899      	ldr	r1, [r3, #8]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f000 f96a 	bl	8002b1e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002858:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	609a      	str	r2, [r3, #8]
      break;
 8002862:	e04f      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6899      	ldr	r1, [r3, #8]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f000 f953 	bl	8002b1e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002886:	609a      	str	r2, [r3, #8]
      break;
 8002888:	e03c      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	461a      	mov	r2, r3
 8002898:	f000 f8ca 	bl	8002a30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2150      	movs	r1, #80	; 0x50
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f921 	bl	8002aea <TIM_ITRx_SetConfig>
      break;
 80028a8:	e02c      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	461a      	mov	r2, r3
 80028b8:	f000 f8e8 	bl	8002a8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2160      	movs	r1, #96	; 0x60
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f911 	bl	8002aea <TIM_ITRx_SetConfig>
      break;
 80028c8:	e01c      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f000 f8aa 	bl	8002a30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2140      	movs	r1, #64	; 0x40
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f901 	bl	8002aea <TIM_ITRx_SetConfig>
      break;
 80028e8:	e00c      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4619      	mov	r1, r3
 80028f4:	4610      	mov	r0, r2
 80028f6:	f000 f8f8 	bl	8002aea <TIM_ITRx_SetConfig>
      break;
 80028fa:	e003      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002900:	e000      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002902:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
	...

08002968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a2b      	ldr	r2, [pc, #172]	; (8002a28 <TIM_Base_SetConfig+0xc0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d007      	beq.n	8002990 <TIM_Base_SetConfig+0x28>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002986:	d003      	beq.n	8002990 <TIM_Base_SetConfig+0x28>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a28      	ldr	r2, [pc, #160]	; (8002a2c <TIM_Base_SetConfig+0xc4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d108      	bne.n	80029a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a20      	ldr	r2, [pc, #128]	; (8002a28 <TIM_Base_SetConfig+0xc0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <TIM_Base_SetConfig+0x52>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d003      	beq.n	80029ba <TIM_Base_SetConfig+0x52>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <TIM_Base_SetConfig+0xc4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d108      	bne.n	80029cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a0d      	ldr	r2, [pc, #52]	; (8002a28 <TIM_Base_SetConfig+0xc0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d103      	bne.n	8002a00 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f023 0201 	bic.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	611a      	str	r2, [r3, #16]
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40000400 	.word	0x40000400

08002a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	f023 0201 	bic.w	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f023 030a 	bic.w	r3, r3, #10
 8002a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	621a      	str	r2, [r3, #32]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	f023 0210 	bic.w	r2, r3, #16
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	031b      	lsls	r3, r3, #12
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	621a      	str	r2, [r3, #32]
}
 8002ae0:	bf00      	nop
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f043 0307 	orr.w	r3, r3, #7
 8002b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	609a      	str	r2, [r3, #8]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b087      	sub	sp, #28
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	021a      	lsls	r2, r3, #8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	609a      	str	r2, [r3, #8]
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e041      	b.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d009      	beq.n	8002bcc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc0:	d004      	beq.n	8002bcc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a10      	ldr	r2, [pc, #64]	; (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d10c      	bne.n	8002be6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40000400 	.word	0x40000400

08002c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e042      	b.n	8002cc8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd ffa4 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fdb7 	bl	80037e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d175      	bne.n	8002ddc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_UART_Transmit+0x2c>
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e06e      	b.n	8002dde <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2221      	movs	r2, #33	; 0x21
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0e:	f7fe f967 	bl	8000fe0 <HAL_GetTick>
 8002d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d28:	d108      	bne.n	8002d3c <HAL_UART_Transmit+0x6c>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d104      	bne.n	8002d3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	e003      	b.n	8002d44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d44:	e02e      	b.n	8002da4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2180      	movs	r1, #128	; 0x80
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fb1c 	bl	800338e <UART_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e03a      	b.n	8002dde <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10b      	bne.n	8002d86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	3302      	adds	r3, #2
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	e007      	b.n	8002d96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	3301      	adds	r3, #1
 8002d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1cb      	bne.n	8002d46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2140      	movs	r1, #64	; 0x40
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fae8 	bl	800338e <UART_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e006      	b.n	8002dde <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e000      	b.n	8002dde <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
  }
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	4613      	mov	r3, r2
 8002df2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d112      	bne.n	8002e26 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_UART_Receive_IT+0x26>
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e00b      	b.n	8002e28 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fb0f 	bl	8003440 <UART_Start_Receive_IT>
 8002e22:	4603      	mov	r3, r0
 8002e24:	e000      	b.n	8002e28 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
  }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b0ba      	sub	sp, #232	; 0xe8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10f      	bne.n	8002e96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <HAL_UART_IRQHandler+0x66>
 8002e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fbec 	bl	800366c <UART_Receive_IT>
      return;
 8002e94:	e25b      	b.n	800334e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80de 	beq.w	800305c <HAL_UART_IRQHandler+0x22c>
 8002ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80d1 	beq.w	800305c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00b      	beq.n	8002ede <HAL_UART_IRQHandler+0xae>
 8002ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <HAL_UART_IRQHandler+0xd2>
 8002eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f043 0202 	orr.w	r2, r3, #2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_UART_IRQHandler+0xf6>
 8002f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f043 0204 	orr.w	r2, r3, #4
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d011      	beq.n	8002f56 <HAL_UART_IRQHandler+0x126>
 8002f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d105      	bne.n	8002f4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f043 0208 	orr.w	r2, r3, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 81f2 	beq.w	8003344 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_UART_IRQHandler+0x14e>
 8002f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fb77 	bl	800366c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d103      	bne.n	8002faa <HAL_UART_IRQHandler+0x17a>
 8002fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d04f      	beq.n	800304a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fa81 	bl	80034b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d041      	beq.n	8003042 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3314      	adds	r3, #20
 8002fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fcc:	e853 3f00 	ldrex	r3, [r3]
 8002fd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3314      	adds	r3, #20
 8002fe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ffa:	e841 2300 	strex	r3, r2, [r1]
 8002ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1d9      	bne.n	8002fbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d013      	beq.n	800303a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	4a7e      	ldr	r2, [pc, #504]	; (8003210 <HAL_UART_IRQHandler+0x3e0>)
 8003018:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe fb42 	bl	80016a8 <HAL_DMA_Abort_IT>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003034:	4610      	mov	r0, r2
 8003036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003038:	e00e      	b.n	8003058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f993 	bl	8003366 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003040:	e00a      	b.n	8003058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f98f 	bl	8003366 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003048:	e006      	b.n	8003058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f98b 	bl	8003366 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003056:	e175      	b.n	8003344 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003058:	bf00      	nop
    return;
 800305a:	e173      	b.n	8003344 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	2b01      	cmp	r3, #1
 8003062:	f040 814f 	bne.w	8003304 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8148 	beq.w	8003304 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8141 	beq.w	8003304 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80b6 	beq.w	8003214 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8145 	beq.w	8003348 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030c6:	429a      	cmp	r2, r3
 80030c8:	f080 813e 	bcs.w	8003348 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b20      	cmp	r3, #32
 80030dc:	f000 8088 	beq.w	80031f0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	330c      	adds	r3, #12
 80030e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	330c      	adds	r3, #12
 8003108:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800310c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003110:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003114:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003118:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1d9      	bne.n	80030e0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3314      	adds	r3, #20
 8003132:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003136:	e853 3f00 	ldrex	r3, [r3]
 800313a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800313c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3314      	adds	r3, #20
 800314c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003150:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003154:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003156:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003158:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e1      	bne.n	800312c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3314      	adds	r3, #20
 800316e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003172:	e853 3f00 	ldrex	r3, [r3]
 8003176:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800317a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3314      	adds	r3, #20
 8003188:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800318c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800318e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003192:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800319a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e3      	bne.n	8003168 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c0:	f023 0310 	bic.w	r3, r3, #16
 80031c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	330c      	adds	r3, #12
 80031ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80031d4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1e3      	bne.n	80031ae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe fa21 	bl	8001632 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031fe:	b29b      	uxth	r3, r3
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	b29b      	uxth	r3, r3
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8b6 	bl	8003378 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800320c:	e09c      	b.n	8003348 <HAL_UART_IRQHandler+0x518>
 800320e:	bf00      	nop
 8003210:	08003577 	.word	0x08003577
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800321c:	b29b      	uxth	r3, r3
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 808e 	beq.w	800334c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8089 	beq.w	800334c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003250:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	330c      	adds	r3, #12
 800325a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800325e:	647a      	str	r2, [r7, #68]	; 0x44
 8003260:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003264:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800326c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e3      	bne.n	800323a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3314      	adds	r3, #20
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	623b      	str	r3, [r7, #32]
   return(result);
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3314      	adds	r3, #20
 8003292:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003296:	633a      	str	r2, [r7, #48]	; 0x30
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800329c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e3      	bne.n	8003272 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	e853 3f00 	ldrex	r3, [r3]
 80032c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0310 	bic.w	r3, r3, #16
 80032ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032dc:	61fa      	str	r2, [r7, #28]
 80032de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e0:	69b9      	ldr	r1, [r7, #24]
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	e841 2300 	strex	r3, r2, [r1]
 80032e8:	617b      	str	r3, [r7, #20]
   return(result);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e3      	bne.n	80032b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032fa:	4619      	mov	r1, r3
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f83b 	bl	8003378 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003302:	e023      	b.n	800334c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <HAL_UART_IRQHandler+0x4f4>
 8003310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f93e 	bl	800359e <UART_Transmit_IT>
    return;
 8003322:	e014      	b.n	800334e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00e      	beq.n	800334e <HAL_UART_IRQHandler+0x51e>
 8003330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f97d 	bl	800363c <UART_EndTransmit_IT>
    return;
 8003342:	e004      	b.n	800334e <HAL_UART_IRQHandler+0x51e>
    return;
 8003344:	bf00      	nop
 8003346:	e002      	b.n	800334e <HAL_UART_IRQHandler+0x51e>
      return;
 8003348:	bf00      	nop
 800334a:	e000      	b.n	800334e <HAL_UART_IRQHandler+0x51e>
      return;
 800334c:	bf00      	nop
  }
}
 800334e:	37e8      	adds	r7, #232	; 0xe8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b086      	sub	sp, #24
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	4613      	mov	r3, r2
 800339c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339e:	e03b      	b.n	8003418 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a6:	d037      	beq.n	8003418 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a8:	f7fd fe1a 	bl	8000fe0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	6a3a      	ldr	r2, [r7, #32]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d302      	bcc.n	80033be <UART_WaitOnFlagUntilTimeout+0x30>
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e03a      	b.n	8003438 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d023      	beq.n	8003418 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b80      	cmp	r3, #128	; 0x80
 80033d4:	d020      	beq.n	8003418 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b40      	cmp	r3, #64	; 0x40
 80033da:	d01d      	beq.n	8003418 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d116      	bne.n	8003418 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f856 	bl	80034b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2208      	movs	r2, #8
 800340a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e00f      	b.n	8003438 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	429a      	cmp	r2, r3
 8003434:	d0b4      	beq.n	80033a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	4613      	mov	r3, r2
 800344c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	88fa      	ldrh	r2, [r7, #6]
 800345e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2222      	movs	r2, #34	; 0x22
 800346a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003484:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0201 	orr.w	r2, r2, #1
 8003494:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0220 	orr.w	r2, r2, #32
 80034a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b095      	sub	sp, #84	; 0x54
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034da:	643a      	str	r2, [r7, #64]	; 0x40
 80034dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e5      	bne.n	80034ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3314      	adds	r3, #20
 80034f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	64bb      	str	r3, [r7, #72]	; 0x48
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3314      	adds	r3, #20
 800350c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800350e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003516:	e841 2300 	strex	r3, r2, [r1]
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e5      	bne.n	80034ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	2b01      	cmp	r3, #1
 8003528:	d119      	bne.n	800355e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	330c      	adds	r3, #12
 8003530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	e853 3f00 	ldrex	r3, [r3]
 8003538:	60bb      	str	r3, [r7, #8]
   return(result);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f023 0310 	bic.w	r3, r3, #16
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	330c      	adds	r3, #12
 8003548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800354a:	61ba      	str	r2, [r7, #24]
 800354c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	6979      	ldr	r1, [r7, #20]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	e841 2300 	strex	r3, r2, [r1]
 8003556:	613b      	str	r3, [r7, #16]
   return(result);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1e5      	bne.n	800352a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800356c:	bf00      	nop
 800356e:	3754      	adds	r7, #84	; 0x54
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr

08003576 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f7ff fee8 	bl	8003366 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800359e:	b480      	push	{r7}
 80035a0:	b085      	sub	sp, #20
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b21      	cmp	r3, #33	; 0x21
 80035b0:	d13e      	bne.n	8003630 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ba:	d114      	bne.n	80035e6 <UART_Transmit_IT+0x48>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d110      	bne.n	80035e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	1c9a      	adds	r2, r3, #2
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	621a      	str	r2, [r3, #32]
 80035e4:	e008      	b.n	80035f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	1c59      	adds	r1, r3, #1
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6211      	str	r1, [r2, #32]
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29b      	uxth	r3, r3
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4619      	mov	r1, r3
 8003606:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10f      	bne.n	800362c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800361a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800362a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	e000      	b.n	8003632 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003630:	2302      	movs	r3, #2
  }
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003652:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fe79 	bl	8003354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08c      	sub	sp, #48	; 0x30
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b22      	cmp	r3, #34	; 0x22
 800367e:	f040 80ae 	bne.w	80037de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368a:	d117      	bne.n	80036bc <UART_Receive_IT+0x50>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d113      	bne.n	80036bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003694:	2300      	movs	r3, #0
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	1c9a      	adds	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
 80036ba:	e026      	b.n	800370a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ce:	d007      	beq.n	80036e0 <UART_Receive_IT+0x74>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <UART_Receive_IT+0x82>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e008      	b.n	8003700 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29b      	uxth	r3, r3
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4619      	mov	r1, r3
 8003718:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800371a:	2b00      	cmp	r3, #0
 800371c:	d15d      	bne.n	80037da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0220 	bic.w	r2, r2, #32
 800372c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800373c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0201 	bic.w	r2, r2, #1
 800374c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	2b01      	cmp	r3, #1
 8003762:	d135      	bne.n	80037d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	330c      	adds	r3, #12
 8003770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	613b      	str	r3, [r7, #16]
   return(result);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f023 0310 	bic.w	r3, r3, #16
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	330c      	adds	r3, #12
 8003788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378a:	623a      	str	r2, [r7, #32]
 800378c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	69f9      	ldr	r1, [r7, #28]
 8003790:	6a3a      	ldr	r2, [r7, #32]
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	61bb      	str	r3, [r7, #24]
   return(result);
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e5      	bne.n	800376a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d10a      	bne.n	80037c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037c6:	4619      	mov	r1, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff fdd5 	bl	8003378 <HAL_UARTEx_RxEventCallback>
 80037ce:	e002      	b.n	80037d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7fc ff17 	bl	8000604 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e002      	b.n	80037e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3730      	adds	r7, #48	; 0x30
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003822:	f023 030c 	bic.w	r3, r3, #12
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	430b      	orrs	r3, r1
 800382e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <UART_SetConfig+0x114>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d103      	bne.n	8003858 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003850:	f7fe fd2a 	bl	80022a8 <HAL_RCC_GetPCLK2Freq>
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	e002      	b.n	800385e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003858:	f7fe fd12 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 800385c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	009a      	lsls	r2, r3, #2
 8003868:	441a      	add	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	4a22      	ldr	r2, [pc, #136]	; (8003900 <UART_SetConfig+0x118>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	0119      	lsls	r1, r3, #4
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009a      	lsls	r2, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	fbb2 f2f3 	udiv	r2, r2, r3
 8003894:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <UART_SetConfig+0x118>)
 8003896:	fba3 0302 	umull	r0, r3, r3, r2
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2064      	movs	r0, #100	; 0x64
 800389e:	fb00 f303 	mul.w	r3, r0, r3
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	3332      	adds	r3, #50	; 0x32
 80038a8:	4a15      	ldr	r2, [pc, #84]	; (8003900 <UART_SetConfig+0x118>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b4:	4419      	add	r1, r3
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	009a      	lsls	r2, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <UART_SetConfig+0x118>)
 80038ce:	fba3 0302 	umull	r0, r3, r3, r2
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	2064      	movs	r0, #100	; 0x64
 80038d6:	fb00 f303 	mul.w	r3, r0, r3
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	3332      	adds	r3, #50	; 0x32
 80038e0:	4a07      	ldr	r2, [pc, #28]	; (8003900 <UART_SetConfig+0x118>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	f003 020f 	and.w	r2, r3, #15
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	440a      	add	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40013800 	.word	0x40013800
 8003900:	51eb851f 	.word	0x51eb851f

08003904 <__errno>:
 8003904:	4b01      	ldr	r3, [pc, #4]	; (800390c <__errno+0x8>)
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000014 	.word	0x20000014

08003910 <__libc_init_array>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	2600      	movs	r6, #0
 8003914:	4d0c      	ldr	r5, [pc, #48]	; (8003948 <__libc_init_array+0x38>)
 8003916:	4c0d      	ldr	r4, [pc, #52]	; (800394c <__libc_init_array+0x3c>)
 8003918:	1b64      	subs	r4, r4, r5
 800391a:	10a4      	asrs	r4, r4, #2
 800391c:	42a6      	cmp	r6, r4
 800391e:	d109      	bne.n	8003934 <__libc_init_array+0x24>
 8003920:	f001 fa62 	bl	8004de8 <_init>
 8003924:	2600      	movs	r6, #0
 8003926:	4d0a      	ldr	r5, [pc, #40]	; (8003950 <__libc_init_array+0x40>)
 8003928:	4c0a      	ldr	r4, [pc, #40]	; (8003954 <__libc_init_array+0x44>)
 800392a:	1b64      	subs	r4, r4, r5
 800392c:	10a4      	asrs	r4, r4, #2
 800392e:	42a6      	cmp	r6, r4
 8003930:	d105      	bne.n	800393e <__libc_init_array+0x2e>
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	f855 3b04 	ldr.w	r3, [r5], #4
 8003938:	4798      	blx	r3
 800393a:	3601      	adds	r6, #1
 800393c:	e7ee      	b.n	800391c <__libc_init_array+0xc>
 800393e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003942:	4798      	blx	r3
 8003944:	3601      	adds	r6, #1
 8003946:	e7f2      	b.n	800392e <__libc_init_array+0x1e>
 8003948:	08004f8c 	.word	0x08004f8c
 800394c:	08004f8c 	.word	0x08004f8c
 8003950:	08004f8c 	.word	0x08004f8c
 8003954:	08004f90 	.word	0x08004f90

08003958 <memset>:
 8003958:	4603      	mov	r3, r0
 800395a:	4402      	add	r2, r0
 800395c:	4293      	cmp	r3, r2
 800395e:	d100      	bne.n	8003962 <memset+0xa>
 8003960:	4770      	bx	lr
 8003962:	f803 1b01 	strb.w	r1, [r3], #1
 8003966:	e7f9      	b.n	800395c <memset+0x4>

08003968 <srand>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4b10      	ldr	r3, [pc, #64]	; (80039ac <srand+0x44>)
 800396c:	4604      	mov	r4, r0
 800396e:	681d      	ldr	r5, [r3, #0]
 8003970:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003972:	b9b3      	cbnz	r3, 80039a2 <srand+0x3a>
 8003974:	2018      	movs	r0, #24
 8003976:	f000 f8e1 	bl	8003b3c <malloc>
 800397a:	4602      	mov	r2, r0
 800397c:	63a8      	str	r0, [r5, #56]	; 0x38
 800397e:	b920      	cbnz	r0, 800398a <srand+0x22>
 8003980:	2142      	movs	r1, #66	; 0x42
 8003982:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <srand+0x48>)
 8003984:	480b      	ldr	r0, [pc, #44]	; (80039b4 <srand+0x4c>)
 8003986:	f000 f897 	bl	8003ab8 <__assert_func>
 800398a:	490b      	ldr	r1, [pc, #44]	; (80039b8 <srand+0x50>)
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <srand+0x54>)
 800398e:	e9c0 1300 	strd	r1, r3, [r0]
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <srand+0x58>)
 8003994:	2100      	movs	r1, #0
 8003996:	6083      	str	r3, [r0, #8]
 8003998:	230b      	movs	r3, #11
 800399a:	8183      	strh	r3, [r0, #12]
 800399c:	2001      	movs	r0, #1
 800399e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80039a2:	2200      	movs	r2, #0
 80039a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80039a6:	611c      	str	r4, [r3, #16]
 80039a8:	615a      	str	r2, [r3, #20]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	20000014 	.word	0x20000014
 80039b0:	08004e44 	.word	0x08004e44
 80039b4:	08004e5b 	.word	0x08004e5b
 80039b8:	abcd330e 	.word	0xabcd330e
 80039bc:	e66d1234 	.word	0xe66d1234
 80039c0:	0005deec 	.word	0x0005deec

080039c4 <rand>:
 80039c4:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <rand+0x60>)
 80039c6:	b510      	push	{r4, lr}
 80039c8:	681c      	ldr	r4, [r3, #0]
 80039ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039cc:	b9b3      	cbnz	r3, 80039fc <rand+0x38>
 80039ce:	2018      	movs	r0, #24
 80039d0:	f000 f8b4 	bl	8003b3c <malloc>
 80039d4:	4602      	mov	r2, r0
 80039d6:	63a0      	str	r0, [r4, #56]	; 0x38
 80039d8:	b920      	cbnz	r0, 80039e4 <rand+0x20>
 80039da:	214e      	movs	r1, #78	; 0x4e
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <rand+0x64>)
 80039de:	4813      	ldr	r0, [pc, #76]	; (8003a2c <rand+0x68>)
 80039e0:	f000 f86a 	bl	8003ab8 <__assert_func>
 80039e4:	4912      	ldr	r1, [pc, #72]	; (8003a30 <rand+0x6c>)
 80039e6:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <rand+0x70>)
 80039e8:	e9c0 1300 	strd	r1, r3, [r0]
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <rand+0x74>)
 80039ee:	2100      	movs	r1, #0
 80039f0:	6083      	str	r3, [r0, #8]
 80039f2:	230b      	movs	r3, #11
 80039f4:	8183      	strh	r3, [r0, #12]
 80039f6:	2001      	movs	r0, #1
 80039f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80039fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80039fe:	480f      	ldr	r0, [pc, #60]	; (8003a3c <rand+0x78>)
 8003a00:	690a      	ldr	r2, [r1, #16]
 8003a02:	694b      	ldr	r3, [r1, #20]
 8003a04:	4350      	muls	r0, r2
 8003a06:	4c0e      	ldr	r4, [pc, #56]	; (8003a40 <rand+0x7c>)
 8003a08:	fb04 0003 	mla	r0, r4, r3, r0
 8003a0c:	fba2 3404 	umull	r3, r4, r2, r4
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	4404      	add	r4, r0
 8003a14:	f144 0000 	adc.w	r0, r4, #0
 8003a18:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8003a1c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003a20:	bd10      	pop	{r4, pc}
 8003a22:	bf00      	nop
 8003a24:	20000014 	.word	0x20000014
 8003a28:	08004e44 	.word	0x08004e44
 8003a2c:	08004e5b 	.word	0x08004e5b
 8003a30:	abcd330e 	.word	0xabcd330e
 8003a34:	e66d1234 	.word	0xe66d1234
 8003a38:	0005deec 	.word	0x0005deec
 8003a3c:	5851f42d 	.word	0x5851f42d
 8003a40:	4c957f2d 	.word	0x4c957f2d

08003a44 <siprintf>:
 8003a44:	b40e      	push	{r1, r2, r3}
 8003a46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a4a:	b500      	push	{lr}
 8003a4c:	b09c      	sub	sp, #112	; 0x70
 8003a4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003a50:	9002      	str	r0, [sp, #8]
 8003a52:	9006      	str	r0, [sp, #24]
 8003a54:	9107      	str	r1, [sp, #28]
 8003a56:	9104      	str	r1, [sp, #16]
 8003a58:	4808      	ldr	r0, [pc, #32]	; (8003a7c <siprintf+0x38>)
 8003a5a:	4909      	ldr	r1, [pc, #36]	; (8003a80 <siprintf+0x3c>)
 8003a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a60:	9105      	str	r1, [sp, #20]
 8003a62:	6800      	ldr	r0, [r0, #0]
 8003a64:	a902      	add	r1, sp, #8
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	f000 f972 	bl	8003d50 <_svfiprintf_r>
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	9b02      	ldr	r3, [sp, #8]
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	b01c      	add	sp, #112	; 0x70
 8003a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a78:	b003      	add	sp, #12
 8003a7a:	4770      	bx	lr
 8003a7c:	20000014 	.word	0x20000014
 8003a80:	ffff0208 	.word	0xffff0208

08003a84 <time>:
 8003a84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <time+0x30>)
 8003a88:	4604      	mov	r4, r0
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	4669      	mov	r1, sp
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	f000 f842 	bl	8003b18 <_gettimeofday_r>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	da05      	bge.n	8003aa4 <time+0x20>
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa0:	e9cd 2300 	strd	r2, r3, [sp]
 8003aa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003aa8:	b10c      	cbz	r4, 8003aae <time+0x2a>
 8003aaa:	e9c4 0100 	strd	r0, r1, [r4]
 8003aae:	b004      	add	sp, #16
 8003ab0:	bd10      	pop	{r4, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000014 	.word	0x20000014

08003ab8 <__assert_func>:
 8003ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003aba:	4614      	mov	r4, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <__assert_func+0x2c>)
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68d8      	ldr	r0, [r3, #12]
 8003ac6:	b14c      	cbz	r4, 8003adc <__assert_func+0x24>
 8003ac8:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <__assert_func+0x30>)
 8003aca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003ace:	9100      	str	r1, [sp, #0]
 8003ad0:	462b      	mov	r3, r5
 8003ad2:	4906      	ldr	r1, [pc, #24]	; (8003aec <__assert_func+0x34>)
 8003ad4:	f000 f80e 	bl	8003af4 <fiprintf>
 8003ad8:	f000 fdf8 	bl	80046cc <abort>
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <__assert_func+0x38>)
 8003ade:	461c      	mov	r4, r3
 8003ae0:	e7f3      	b.n	8003aca <__assert_func+0x12>
 8003ae2:	bf00      	nop
 8003ae4:	20000014 	.word	0x20000014
 8003ae8:	08004eba 	.word	0x08004eba
 8003aec:	08004ec7 	.word	0x08004ec7
 8003af0:	08004ef5 	.word	0x08004ef5

08003af4 <fiprintf>:
 8003af4:	b40e      	push	{r1, r2, r3}
 8003af6:	b503      	push	{r0, r1, lr}
 8003af8:	4601      	mov	r1, r0
 8003afa:	ab03      	add	r3, sp, #12
 8003afc:	4805      	ldr	r0, [pc, #20]	; (8003b14 <fiprintf+0x20>)
 8003afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b02:	6800      	ldr	r0, [r0, #0]
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	f000 fa4b 	bl	8003fa0 <_vfiprintf_r>
 8003b0a:	b002      	add	sp, #8
 8003b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b10:	b003      	add	sp, #12
 8003b12:	4770      	bx	lr
 8003b14:	20000014 	.word	0x20000014

08003b18 <_gettimeofday_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4d06      	ldr	r5, [pc, #24]	; (8003b38 <_gettimeofday_r+0x20>)
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	602b      	str	r3, [r5, #0]
 8003b26:	f001 f957 	bl	8004dd8 <_gettimeofday>
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	d102      	bne.n	8003b34 <_gettimeofday_r+0x1c>
 8003b2e:	682b      	ldr	r3, [r5, #0]
 8003b30:	b103      	cbz	r3, 8003b34 <_gettimeofday_r+0x1c>
 8003b32:	6023      	str	r3, [r4, #0]
 8003b34:	bd38      	pop	{r3, r4, r5, pc}
 8003b36:	bf00      	nop
 8003b38:	20000250 	.word	0x20000250

08003b3c <malloc>:
 8003b3c:	4b02      	ldr	r3, [pc, #8]	; (8003b48 <malloc+0xc>)
 8003b3e:	4601      	mov	r1, r0
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	f000 b84f 	b.w	8003be4 <_malloc_r>
 8003b46:	bf00      	nop
 8003b48:	20000014 	.word	0x20000014

08003b4c <_free_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	4605      	mov	r5, r0
 8003b50:	2900      	cmp	r1, #0
 8003b52:	d043      	beq.n	8003bdc <_free_r+0x90>
 8003b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b58:	1f0c      	subs	r4, r1, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bfb8      	it	lt
 8003b5e:	18e4      	addlt	r4, r4, r3
 8003b60:	f001 f810 	bl	8004b84 <__malloc_lock>
 8003b64:	4a1e      	ldr	r2, [pc, #120]	; (8003be0 <_free_r+0x94>)
 8003b66:	6813      	ldr	r3, [r2, #0]
 8003b68:	4610      	mov	r0, r2
 8003b6a:	b933      	cbnz	r3, 8003b7a <_free_r+0x2e>
 8003b6c:	6063      	str	r3, [r4, #4]
 8003b6e:	6014      	str	r4, [r2, #0]
 8003b70:	4628      	mov	r0, r5
 8003b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b76:	f001 b80b 	b.w	8004b90 <__malloc_unlock>
 8003b7a:	42a3      	cmp	r3, r4
 8003b7c:	d90a      	bls.n	8003b94 <_free_r+0x48>
 8003b7e:	6821      	ldr	r1, [r4, #0]
 8003b80:	1862      	adds	r2, r4, r1
 8003b82:	4293      	cmp	r3, r2
 8003b84:	bf01      	itttt	eq
 8003b86:	681a      	ldreq	r2, [r3, #0]
 8003b88:	685b      	ldreq	r3, [r3, #4]
 8003b8a:	1852      	addeq	r2, r2, r1
 8003b8c:	6022      	streq	r2, [r4, #0]
 8003b8e:	6063      	str	r3, [r4, #4]
 8003b90:	6004      	str	r4, [r0, #0]
 8003b92:	e7ed      	b.n	8003b70 <_free_r+0x24>
 8003b94:	461a      	mov	r2, r3
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	b10b      	cbz	r3, 8003b9e <_free_r+0x52>
 8003b9a:	42a3      	cmp	r3, r4
 8003b9c:	d9fa      	bls.n	8003b94 <_free_r+0x48>
 8003b9e:	6811      	ldr	r1, [r2, #0]
 8003ba0:	1850      	adds	r0, r2, r1
 8003ba2:	42a0      	cmp	r0, r4
 8003ba4:	d10b      	bne.n	8003bbe <_free_r+0x72>
 8003ba6:	6820      	ldr	r0, [r4, #0]
 8003ba8:	4401      	add	r1, r0
 8003baa:	1850      	adds	r0, r2, r1
 8003bac:	4283      	cmp	r3, r0
 8003bae:	6011      	str	r1, [r2, #0]
 8003bb0:	d1de      	bne.n	8003b70 <_free_r+0x24>
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4401      	add	r1, r0
 8003bb8:	6011      	str	r1, [r2, #0]
 8003bba:	6053      	str	r3, [r2, #4]
 8003bbc:	e7d8      	b.n	8003b70 <_free_r+0x24>
 8003bbe:	d902      	bls.n	8003bc6 <_free_r+0x7a>
 8003bc0:	230c      	movs	r3, #12
 8003bc2:	602b      	str	r3, [r5, #0]
 8003bc4:	e7d4      	b.n	8003b70 <_free_r+0x24>
 8003bc6:	6820      	ldr	r0, [r4, #0]
 8003bc8:	1821      	adds	r1, r4, r0
 8003bca:	428b      	cmp	r3, r1
 8003bcc:	bf01      	itttt	eq
 8003bce:	6819      	ldreq	r1, [r3, #0]
 8003bd0:	685b      	ldreq	r3, [r3, #4]
 8003bd2:	1809      	addeq	r1, r1, r0
 8003bd4:	6021      	streq	r1, [r4, #0]
 8003bd6:	6063      	str	r3, [r4, #4]
 8003bd8:	6054      	str	r4, [r2, #4]
 8003bda:	e7c9      	b.n	8003b70 <_free_r+0x24>
 8003bdc:	bd38      	pop	{r3, r4, r5, pc}
 8003bde:	bf00      	nop
 8003be0:	200000a8 	.word	0x200000a8

08003be4 <_malloc_r>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	1ccd      	adds	r5, r1, #3
 8003be8:	f025 0503 	bic.w	r5, r5, #3
 8003bec:	3508      	adds	r5, #8
 8003bee:	2d0c      	cmp	r5, #12
 8003bf0:	bf38      	it	cc
 8003bf2:	250c      	movcc	r5, #12
 8003bf4:	2d00      	cmp	r5, #0
 8003bf6:	4606      	mov	r6, r0
 8003bf8:	db01      	blt.n	8003bfe <_malloc_r+0x1a>
 8003bfa:	42a9      	cmp	r1, r5
 8003bfc:	d903      	bls.n	8003c06 <_malloc_r+0x22>
 8003bfe:	230c      	movs	r3, #12
 8003c00:	6033      	str	r3, [r6, #0]
 8003c02:	2000      	movs	r0, #0
 8003c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c06:	f000 ffbd 	bl	8004b84 <__malloc_lock>
 8003c0a:	4921      	ldr	r1, [pc, #132]	; (8003c90 <_malloc_r+0xac>)
 8003c0c:	680a      	ldr	r2, [r1, #0]
 8003c0e:	4614      	mov	r4, r2
 8003c10:	b99c      	cbnz	r4, 8003c3a <_malloc_r+0x56>
 8003c12:	4f20      	ldr	r7, [pc, #128]	; (8003c94 <_malloc_r+0xb0>)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	b923      	cbnz	r3, 8003c22 <_malloc_r+0x3e>
 8003c18:	4621      	mov	r1, r4
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	f000 fc86 	bl	800452c <_sbrk_r>
 8003c20:	6038      	str	r0, [r7, #0]
 8003c22:	4629      	mov	r1, r5
 8003c24:	4630      	mov	r0, r6
 8003c26:	f000 fc81 	bl	800452c <_sbrk_r>
 8003c2a:	1c43      	adds	r3, r0, #1
 8003c2c:	d123      	bne.n	8003c76 <_malloc_r+0x92>
 8003c2e:	230c      	movs	r3, #12
 8003c30:	4630      	mov	r0, r6
 8003c32:	6033      	str	r3, [r6, #0]
 8003c34:	f000 ffac 	bl	8004b90 <__malloc_unlock>
 8003c38:	e7e3      	b.n	8003c02 <_malloc_r+0x1e>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	1b5b      	subs	r3, r3, r5
 8003c3e:	d417      	bmi.n	8003c70 <_malloc_r+0x8c>
 8003c40:	2b0b      	cmp	r3, #11
 8003c42:	d903      	bls.n	8003c4c <_malloc_r+0x68>
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	441c      	add	r4, r3
 8003c48:	6025      	str	r5, [r4, #0]
 8003c4a:	e004      	b.n	8003c56 <_malloc_r+0x72>
 8003c4c:	6863      	ldr	r3, [r4, #4]
 8003c4e:	42a2      	cmp	r2, r4
 8003c50:	bf0c      	ite	eq
 8003c52:	600b      	streq	r3, [r1, #0]
 8003c54:	6053      	strne	r3, [r2, #4]
 8003c56:	4630      	mov	r0, r6
 8003c58:	f000 ff9a 	bl	8004b90 <__malloc_unlock>
 8003c5c:	f104 000b 	add.w	r0, r4, #11
 8003c60:	1d23      	adds	r3, r4, #4
 8003c62:	f020 0007 	bic.w	r0, r0, #7
 8003c66:	1ac2      	subs	r2, r0, r3
 8003c68:	d0cc      	beq.n	8003c04 <_malloc_r+0x20>
 8003c6a:	1a1b      	subs	r3, r3, r0
 8003c6c:	50a3      	str	r3, [r4, r2]
 8003c6e:	e7c9      	b.n	8003c04 <_malloc_r+0x20>
 8003c70:	4622      	mov	r2, r4
 8003c72:	6864      	ldr	r4, [r4, #4]
 8003c74:	e7cc      	b.n	8003c10 <_malloc_r+0x2c>
 8003c76:	1cc4      	adds	r4, r0, #3
 8003c78:	f024 0403 	bic.w	r4, r4, #3
 8003c7c:	42a0      	cmp	r0, r4
 8003c7e:	d0e3      	beq.n	8003c48 <_malloc_r+0x64>
 8003c80:	1a21      	subs	r1, r4, r0
 8003c82:	4630      	mov	r0, r6
 8003c84:	f000 fc52 	bl	800452c <_sbrk_r>
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d1dd      	bne.n	8003c48 <_malloc_r+0x64>
 8003c8c:	e7cf      	b.n	8003c2e <_malloc_r+0x4a>
 8003c8e:	bf00      	nop
 8003c90:	200000a8 	.word	0x200000a8
 8003c94:	200000ac 	.word	0x200000ac

08003c98 <__ssputs_r>:
 8003c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9c:	688e      	ldr	r6, [r1, #8]
 8003c9e:	4682      	mov	sl, r0
 8003ca0:	429e      	cmp	r6, r3
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	4690      	mov	r8, r2
 8003ca6:	461f      	mov	r7, r3
 8003ca8:	d838      	bhi.n	8003d1c <__ssputs_r+0x84>
 8003caa:	898a      	ldrh	r2, [r1, #12]
 8003cac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cb0:	d032      	beq.n	8003d18 <__ssputs_r+0x80>
 8003cb2:	6825      	ldr	r5, [r4, #0]
 8003cb4:	6909      	ldr	r1, [r1, #16]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	eba5 0901 	sub.w	r9, r5, r1
 8003cbc:	6965      	ldr	r5, [r4, #20]
 8003cbe:	444b      	add	r3, r9
 8003cc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cc8:	106d      	asrs	r5, r5, #1
 8003cca:	429d      	cmp	r5, r3
 8003ccc:	bf38      	it	cc
 8003cce:	461d      	movcc	r5, r3
 8003cd0:	0553      	lsls	r3, r2, #21
 8003cd2:	d531      	bpl.n	8003d38 <__ssputs_r+0xa0>
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	f7ff ff85 	bl	8003be4 <_malloc_r>
 8003cda:	4606      	mov	r6, r0
 8003cdc:	b950      	cbnz	r0, 8003cf4 <__ssputs_r+0x5c>
 8003cde:	230c      	movs	r3, #12
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	f8ca 3000 	str.w	r3, [sl]
 8003ce8:	89a3      	ldrh	r3, [r4, #12]
 8003cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cee:	81a3      	strh	r3, [r4, #12]
 8003cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf4:	464a      	mov	r2, r9
 8003cf6:	6921      	ldr	r1, [r4, #16]
 8003cf8:	f000 ff1c 	bl	8004b34 <memcpy>
 8003cfc:	89a3      	ldrh	r3, [r4, #12]
 8003cfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d06:	81a3      	strh	r3, [r4, #12]
 8003d08:	6126      	str	r6, [r4, #16]
 8003d0a:	444e      	add	r6, r9
 8003d0c:	6026      	str	r6, [r4, #0]
 8003d0e:	463e      	mov	r6, r7
 8003d10:	6165      	str	r5, [r4, #20]
 8003d12:	eba5 0509 	sub.w	r5, r5, r9
 8003d16:	60a5      	str	r5, [r4, #8]
 8003d18:	42be      	cmp	r6, r7
 8003d1a:	d900      	bls.n	8003d1e <__ssputs_r+0x86>
 8003d1c:	463e      	mov	r6, r7
 8003d1e:	4632      	mov	r2, r6
 8003d20:	4641      	mov	r1, r8
 8003d22:	6820      	ldr	r0, [r4, #0]
 8003d24:	f000 ff14 	bl	8004b50 <memmove>
 8003d28:	68a3      	ldr	r3, [r4, #8]
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	1b9b      	subs	r3, r3, r6
 8003d2e:	4432      	add	r2, r6
 8003d30:	2000      	movs	r0, #0
 8003d32:	60a3      	str	r3, [r4, #8]
 8003d34:	6022      	str	r2, [r4, #0]
 8003d36:	e7db      	b.n	8003cf0 <__ssputs_r+0x58>
 8003d38:	462a      	mov	r2, r5
 8003d3a:	f000 ff2f 	bl	8004b9c <_realloc_r>
 8003d3e:	4606      	mov	r6, r0
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d1e1      	bne.n	8003d08 <__ssputs_r+0x70>
 8003d44:	4650      	mov	r0, sl
 8003d46:	6921      	ldr	r1, [r4, #16]
 8003d48:	f7ff ff00 	bl	8003b4c <_free_r>
 8003d4c:	e7c7      	b.n	8003cde <__ssputs_r+0x46>
	...

08003d50 <_svfiprintf_r>:
 8003d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d54:	4698      	mov	r8, r3
 8003d56:	898b      	ldrh	r3, [r1, #12]
 8003d58:	4607      	mov	r7, r0
 8003d5a:	061b      	lsls	r3, r3, #24
 8003d5c:	460d      	mov	r5, r1
 8003d5e:	4614      	mov	r4, r2
 8003d60:	b09d      	sub	sp, #116	; 0x74
 8003d62:	d50e      	bpl.n	8003d82 <_svfiprintf_r+0x32>
 8003d64:	690b      	ldr	r3, [r1, #16]
 8003d66:	b963      	cbnz	r3, 8003d82 <_svfiprintf_r+0x32>
 8003d68:	2140      	movs	r1, #64	; 0x40
 8003d6a:	f7ff ff3b 	bl	8003be4 <_malloc_r>
 8003d6e:	6028      	str	r0, [r5, #0]
 8003d70:	6128      	str	r0, [r5, #16]
 8003d72:	b920      	cbnz	r0, 8003d7e <_svfiprintf_r+0x2e>
 8003d74:	230c      	movs	r3, #12
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7c:	e0d1      	b.n	8003f22 <_svfiprintf_r+0x1d2>
 8003d7e:	2340      	movs	r3, #64	; 0x40
 8003d80:	616b      	str	r3, [r5, #20]
 8003d82:	2300      	movs	r3, #0
 8003d84:	9309      	str	r3, [sp, #36]	; 0x24
 8003d86:	2320      	movs	r3, #32
 8003d88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d8c:	2330      	movs	r3, #48	; 0x30
 8003d8e:	f04f 0901 	mov.w	r9, #1
 8003d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f3c <_svfiprintf_r+0x1ec>
 8003d9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d9e:	4623      	mov	r3, r4
 8003da0:	469a      	mov	sl, r3
 8003da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003da6:	b10a      	cbz	r2, 8003dac <_svfiprintf_r+0x5c>
 8003da8:	2a25      	cmp	r2, #37	; 0x25
 8003daa:	d1f9      	bne.n	8003da0 <_svfiprintf_r+0x50>
 8003dac:	ebba 0b04 	subs.w	fp, sl, r4
 8003db0:	d00b      	beq.n	8003dca <_svfiprintf_r+0x7a>
 8003db2:	465b      	mov	r3, fp
 8003db4:	4622      	mov	r2, r4
 8003db6:	4629      	mov	r1, r5
 8003db8:	4638      	mov	r0, r7
 8003dba:	f7ff ff6d 	bl	8003c98 <__ssputs_r>
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	f000 80aa 	beq.w	8003f18 <_svfiprintf_r+0x1c8>
 8003dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dc6:	445a      	add	r2, fp
 8003dc8:	9209      	str	r2, [sp, #36]	; 0x24
 8003dca:	f89a 3000 	ldrb.w	r3, [sl]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80a2 	beq.w	8003f18 <_svfiprintf_r+0x1c8>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dde:	f10a 0a01 	add.w	sl, sl, #1
 8003de2:	9304      	str	r3, [sp, #16]
 8003de4:	9307      	str	r3, [sp, #28]
 8003de6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dea:	931a      	str	r3, [sp, #104]	; 0x68
 8003dec:	4654      	mov	r4, sl
 8003dee:	2205      	movs	r2, #5
 8003df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df4:	4851      	ldr	r0, [pc, #324]	; (8003f3c <_svfiprintf_r+0x1ec>)
 8003df6:	f000 fe8f 	bl	8004b18 <memchr>
 8003dfa:	9a04      	ldr	r2, [sp, #16]
 8003dfc:	b9d8      	cbnz	r0, 8003e36 <_svfiprintf_r+0xe6>
 8003dfe:	06d0      	lsls	r0, r2, #27
 8003e00:	bf44      	itt	mi
 8003e02:	2320      	movmi	r3, #32
 8003e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e08:	0711      	lsls	r1, r2, #28
 8003e0a:	bf44      	itt	mi
 8003e0c:	232b      	movmi	r3, #43	; 0x2b
 8003e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e12:	f89a 3000 	ldrb.w	r3, [sl]
 8003e16:	2b2a      	cmp	r3, #42	; 0x2a
 8003e18:	d015      	beq.n	8003e46 <_svfiprintf_r+0xf6>
 8003e1a:	4654      	mov	r4, sl
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	f04f 0c0a 	mov.w	ip, #10
 8003e22:	9a07      	ldr	r2, [sp, #28]
 8003e24:	4621      	mov	r1, r4
 8003e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e2a:	3b30      	subs	r3, #48	; 0x30
 8003e2c:	2b09      	cmp	r3, #9
 8003e2e:	d94e      	bls.n	8003ece <_svfiprintf_r+0x17e>
 8003e30:	b1b0      	cbz	r0, 8003e60 <_svfiprintf_r+0x110>
 8003e32:	9207      	str	r2, [sp, #28]
 8003e34:	e014      	b.n	8003e60 <_svfiprintf_r+0x110>
 8003e36:	eba0 0308 	sub.w	r3, r0, r8
 8003e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	46a2      	mov	sl, r4
 8003e42:	9304      	str	r3, [sp, #16]
 8003e44:	e7d2      	b.n	8003dec <_svfiprintf_r+0x9c>
 8003e46:	9b03      	ldr	r3, [sp, #12]
 8003e48:	1d19      	adds	r1, r3, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	9103      	str	r1, [sp, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bfbb      	ittet	lt
 8003e52:	425b      	neglt	r3, r3
 8003e54:	f042 0202 	orrlt.w	r2, r2, #2
 8003e58:	9307      	strge	r3, [sp, #28]
 8003e5a:	9307      	strlt	r3, [sp, #28]
 8003e5c:	bfb8      	it	lt
 8003e5e:	9204      	strlt	r2, [sp, #16]
 8003e60:	7823      	ldrb	r3, [r4, #0]
 8003e62:	2b2e      	cmp	r3, #46	; 0x2e
 8003e64:	d10c      	bne.n	8003e80 <_svfiprintf_r+0x130>
 8003e66:	7863      	ldrb	r3, [r4, #1]
 8003e68:	2b2a      	cmp	r3, #42	; 0x2a
 8003e6a:	d135      	bne.n	8003ed8 <_svfiprintf_r+0x188>
 8003e6c:	9b03      	ldr	r3, [sp, #12]
 8003e6e:	3402      	adds	r4, #2
 8003e70:	1d1a      	adds	r2, r3, #4
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	9203      	str	r2, [sp, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bfb8      	it	lt
 8003e7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e7e:	9305      	str	r3, [sp, #20]
 8003e80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f4c <_svfiprintf_r+0x1fc>
 8003e84:	2203      	movs	r2, #3
 8003e86:	4650      	mov	r0, sl
 8003e88:	7821      	ldrb	r1, [r4, #0]
 8003e8a:	f000 fe45 	bl	8004b18 <memchr>
 8003e8e:	b140      	cbz	r0, 8003ea2 <_svfiprintf_r+0x152>
 8003e90:	2340      	movs	r3, #64	; 0x40
 8003e92:	eba0 000a 	sub.w	r0, r0, sl
 8003e96:	fa03 f000 	lsl.w	r0, r3, r0
 8003e9a:	9b04      	ldr	r3, [sp, #16]
 8003e9c:	3401      	adds	r4, #1
 8003e9e:	4303      	orrs	r3, r0
 8003ea0:	9304      	str	r3, [sp, #16]
 8003ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea6:	2206      	movs	r2, #6
 8003ea8:	4825      	ldr	r0, [pc, #148]	; (8003f40 <_svfiprintf_r+0x1f0>)
 8003eaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eae:	f000 fe33 	bl	8004b18 <memchr>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d038      	beq.n	8003f28 <_svfiprintf_r+0x1d8>
 8003eb6:	4b23      	ldr	r3, [pc, #140]	; (8003f44 <_svfiprintf_r+0x1f4>)
 8003eb8:	bb1b      	cbnz	r3, 8003f02 <_svfiprintf_r+0x1b2>
 8003eba:	9b03      	ldr	r3, [sp, #12]
 8003ebc:	3307      	adds	r3, #7
 8003ebe:	f023 0307 	bic.w	r3, r3, #7
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	9303      	str	r3, [sp, #12]
 8003ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec8:	4433      	add	r3, r6
 8003eca:	9309      	str	r3, [sp, #36]	; 0x24
 8003ecc:	e767      	b.n	8003d9e <_svfiprintf_r+0x4e>
 8003ece:	460c      	mov	r4, r1
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ed6:	e7a5      	b.n	8003e24 <_svfiprintf_r+0xd4>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f04f 0c0a 	mov.w	ip, #10
 8003ede:	4619      	mov	r1, r3
 8003ee0:	3401      	adds	r4, #1
 8003ee2:	9305      	str	r3, [sp, #20]
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eea:	3a30      	subs	r2, #48	; 0x30
 8003eec:	2a09      	cmp	r2, #9
 8003eee:	d903      	bls.n	8003ef8 <_svfiprintf_r+0x1a8>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0c5      	beq.n	8003e80 <_svfiprintf_r+0x130>
 8003ef4:	9105      	str	r1, [sp, #20]
 8003ef6:	e7c3      	b.n	8003e80 <_svfiprintf_r+0x130>
 8003ef8:	4604      	mov	r4, r0
 8003efa:	2301      	movs	r3, #1
 8003efc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f00:	e7f0      	b.n	8003ee4 <_svfiprintf_r+0x194>
 8003f02:	ab03      	add	r3, sp, #12
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	462a      	mov	r2, r5
 8003f08:	4638      	mov	r0, r7
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <_svfiprintf_r+0x1f8>)
 8003f0c:	a904      	add	r1, sp, #16
 8003f0e:	f3af 8000 	nop.w
 8003f12:	1c42      	adds	r2, r0, #1
 8003f14:	4606      	mov	r6, r0
 8003f16:	d1d6      	bne.n	8003ec6 <_svfiprintf_r+0x176>
 8003f18:	89ab      	ldrh	r3, [r5, #12]
 8003f1a:	065b      	lsls	r3, r3, #25
 8003f1c:	f53f af2c 	bmi.w	8003d78 <_svfiprintf_r+0x28>
 8003f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f22:	b01d      	add	sp, #116	; 0x74
 8003f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f28:	ab03      	add	r3, sp, #12
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	462a      	mov	r2, r5
 8003f2e:	4638      	mov	r0, r7
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <_svfiprintf_r+0x1f8>)
 8003f32:	a904      	add	r1, sp, #16
 8003f34:	f000 f9d4 	bl	80042e0 <_printf_i>
 8003f38:	e7eb      	b.n	8003f12 <_svfiprintf_r+0x1c2>
 8003f3a:	bf00      	nop
 8003f3c:	08004ef6 	.word	0x08004ef6
 8003f40:	08004f00 	.word	0x08004f00
 8003f44:	00000000 	.word	0x00000000
 8003f48:	08003c99 	.word	0x08003c99
 8003f4c:	08004efc 	.word	0x08004efc

08003f50 <__sfputc_r>:
 8003f50:	6893      	ldr	r3, [r2, #8]
 8003f52:	b410      	push	{r4}
 8003f54:	3b01      	subs	r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	6093      	str	r3, [r2, #8]
 8003f5a:	da07      	bge.n	8003f6c <__sfputc_r+0x1c>
 8003f5c:	6994      	ldr	r4, [r2, #24]
 8003f5e:	42a3      	cmp	r3, r4
 8003f60:	db01      	blt.n	8003f66 <__sfputc_r+0x16>
 8003f62:	290a      	cmp	r1, #10
 8003f64:	d102      	bne.n	8003f6c <__sfputc_r+0x1c>
 8003f66:	bc10      	pop	{r4}
 8003f68:	f000 baf0 	b.w	800454c <__swbuf_r>
 8003f6c:	6813      	ldr	r3, [r2, #0]
 8003f6e:	1c58      	adds	r0, r3, #1
 8003f70:	6010      	str	r0, [r2, #0]
 8003f72:	7019      	strb	r1, [r3, #0]
 8003f74:	4608      	mov	r0, r1
 8003f76:	bc10      	pop	{r4}
 8003f78:	4770      	bx	lr

08003f7a <__sfputs_r>:
 8003f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7c:	4606      	mov	r6, r0
 8003f7e:	460f      	mov	r7, r1
 8003f80:	4614      	mov	r4, r2
 8003f82:	18d5      	adds	r5, r2, r3
 8003f84:	42ac      	cmp	r4, r5
 8003f86:	d101      	bne.n	8003f8c <__sfputs_r+0x12>
 8003f88:	2000      	movs	r0, #0
 8003f8a:	e007      	b.n	8003f9c <__sfputs_r+0x22>
 8003f8c:	463a      	mov	r2, r7
 8003f8e:	4630      	mov	r0, r6
 8003f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f94:	f7ff ffdc 	bl	8003f50 <__sfputc_r>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d1f3      	bne.n	8003f84 <__sfputs_r+0xa>
 8003f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fa0 <_vfiprintf_r>:
 8003fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa4:	460d      	mov	r5, r1
 8003fa6:	4614      	mov	r4, r2
 8003fa8:	4698      	mov	r8, r3
 8003faa:	4606      	mov	r6, r0
 8003fac:	b09d      	sub	sp, #116	; 0x74
 8003fae:	b118      	cbz	r0, 8003fb8 <_vfiprintf_r+0x18>
 8003fb0:	6983      	ldr	r3, [r0, #24]
 8003fb2:	b90b      	cbnz	r3, 8003fb8 <_vfiprintf_r+0x18>
 8003fb4:	f000 fcac 	bl	8004910 <__sinit>
 8003fb8:	4b89      	ldr	r3, [pc, #548]	; (80041e0 <_vfiprintf_r+0x240>)
 8003fba:	429d      	cmp	r5, r3
 8003fbc:	d11b      	bne.n	8003ff6 <_vfiprintf_r+0x56>
 8003fbe:	6875      	ldr	r5, [r6, #4]
 8003fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fc2:	07d9      	lsls	r1, r3, #31
 8003fc4:	d405      	bmi.n	8003fd2 <_vfiprintf_r+0x32>
 8003fc6:	89ab      	ldrh	r3, [r5, #12]
 8003fc8:	059a      	lsls	r2, r3, #22
 8003fca:	d402      	bmi.n	8003fd2 <_vfiprintf_r+0x32>
 8003fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fce:	f000 fd3d 	bl	8004a4c <__retarget_lock_acquire_recursive>
 8003fd2:	89ab      	ldrh	r3, [r5, #12]
 8003fd4:	071b      	lsls	r3, r3, #28
 8003fd6:	d501      	bpl.n	8003fdc <_vfiprintf_r+0x3c>
 8003fd8:	692b      	ldr	r3, [r5, #16]
 8003fda:	b9eb      	cbnz	r3, 8004018 <_vfiprintf_r+0x78>
 8003fdc:	4629      	mov	r1, r5
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f000 fb06 	bl	80045f0 <__swsetup_r>
 8003fe4:	b1c0      	cbz	r0, 8004018 <_vfiprintf_r+0x78>
 8003fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fe8:	07dc      	lsls	r4, r3, #31
 8003fea:	d50e      	bpl.n	800400a <_vfiprintf_r+0x6a>
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	b01d      	add	sp, #116	; 0x74
 8003ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff6:	4b7b      	ldr	r3, [pc, #492]	; (80041e4 <_vfiprintf_r+0x244>)
 8003ff8:	429d      	cmp	r5, r3
 8003ffa:	d101      	bne.n	8004000 <_vfiprintf_r+0x60>
 8003ffc:	68b5      	ldr	r5, [r6, #8]
 8003ffe:	e7df      	b.n	8003fc0 <_vfiprintf_r+0x20>
 8004000:	4b79      	ldr	r3, [pc, #484]	; (80041e8 <_vfiprintf_r+0x248>)
 8004002:	429d      	cmp	r5, r3
 8004004:	bf08      	it	eq
 8004006:	68f5      	ldreq	r5, [r6, #12]
 8004008:	e7da      	b.n	8003fc0 <_vfiprintf_r+0x20>
 800400a:	89ab      	ldrh	r3, [r5, #12]
 800400c:	0598      	lsls	r0, r3, #22
 800400e:	d4ed      	bmi.n	8003fec <_vfiprintf_r+0x4c>
 8004010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004012:	f000 fd1c 	bl	8004a4e <__retarget_lock_release_recursive>
 8004016:	e7e9      	b.n	8003fec <_vfiprintf_r+0x4c>
 8004018:	2300      	movs	r3, #0
 800401a:	9309      	str	r3, [sp, #36]	; 0x24
 800401c:	2320      	movs	r3, #32
 800401e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004022:	2330      	movs	r3, #48	; 0x30
 8004024:	f04f 0901 	mov.w	r9, #1
 8004028:	f8cd 800c 	str.w	r8, [sp, #12]
 800402c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80041ec <_vfiprintf_r+0x24c>
 8004030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004034:	4623      	mov	r3, r4
 8004036:	469a      	mov	sl, r3
 8004038:	f813 2b01 	ldrb.w	r2, [r3], #1
 800403c:	b10a      	cbz	r2, 8004042 <_vfiprintf_r+0xa2>
 800403e:	2a25      	cmp	r2, #37	; 0x25
 8004040:	d1f9      	bne.n	8004036 <_vfiprintf_r+0x96>
 8004042:	ebba 0b04 	subs.w	fp, sl, r4
 8004046:	d00b      	beq.n	8004060 <_vfiprintf_r+0xc0>
 8004048:	465b      	mov	r3, fp
 800404a:	4622      	mov	r2, r4
 800404c:	4629      	mov	r1, r5
 800404e:	4630      	mov	r0, r6
 8004050:	f7ff ff93 	bl	8003f7a <__sfputs_r>
 8004054:	3001      	adds	r0, #1
 8004056:	f000 80aa 	beq.w	80041ae <_vfiprintf_r+0x20e>
 800405a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800405c:	445a      	add	r2, fp
 800405e:	9209      	str	r2, [sp, #36]	; 0x24
 8004060:	f89a 3000 	ldrb.w	r3, [sl]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80a2 	beq.w	80041ae <_vfiprintf_r+0x20e>
 800406a:	2300      	movs	r3, #0
 800406c:	f04f 32ff 	mov.w	r2, #4294967295
 8004070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004074:	f10a 0a01 	add.w	sl, sl, #1
 8004078:	9304      	str	r3, [sp, #16]
 800407a:	9307      	str	r3, [sp, #28]
 800407c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004080:	931a      	str	r3, [sp, #104]	; 0x68
 8004082:	4654      	mov	r4, sl
 8004084:	2205      	movs	r2, #5
 8004086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800408a:	4858      	ldr	r0, [pc, #352]	; (80041ec <_vfiprintf_r+0x24c>)
 800408c:	f000 fd44 	bl	8004b18 <memchr>
 8004090:	9a04      	ldr	r2, [sp, #16]
 8004092:	b9d8      	cbnz	r0, 80040cc <_vfiprintf_r+0x12c>
 8004094:	06d1      	lsls	r1, r2, #27
 8004096:	bf44      	itt	mi
 8004098:	2320      	movmi	r3, #32
 800409a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800409e:	0713      	lsls	r3, r2, #28
 80040a0:	bf44      	itt	mi
 80040a2:	232b      	movmi	r3, #43	; 0x2b
 80040a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040a8:	f89a 3000 	ldrb.w	r3, [sl]
 80040ac:	2b2a      	cmp	r3, #42	; 0x2a
 80040ae:	d015      	beq.n	80040dc <_vfiprintf_r+0x13c>
 80040b0:	4654      	mov	r4, sl
 80040b2:	2000      	movs	r0, #0
 80040b4:	f04f 0c0a 	mov.w	ip, #10
 80040b8:	9a07      	ldr	r2, [sp, #28]
 80040ba:	4621      	mov	r1, r4
 80040bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040c0:	3b30      	subs	r3, #48	; 0x30
 80040c2:	2b09      	cmp	r3, #9
 80040c4:	d94e      	bls.n	8004164 <_vfiprintf_r+0x1c4>
 80040c6:	b1b0      	cbz	r0, 80040f6 <_vfiprintf_r+0x156>
 80040c8:	9207      	str	r2, [sp, #28]
 80040ca:	e014      	b.n	80040f6 <_vfiprintf_r+0x156>
 80040cc:	eba0 0308 	sub.w	r3, r0, r8
 80040d0:	fa09 f303 	lsl.w	r3, r9, r3
 80040d4:	4313      	orrs	r3, r2
 80040d6:	46a2      	mov	sl, r4
 80040d8:	9304      	str	r3, [sp, #16]
 80040da:	e7d2      	b.n	8004082 <_vfiprintf_r+0xe2>
 80040dc:	9b03      	ldr	r3, [sp, #12]
 80040de:	1d19      	adds	r1, r3, #4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	9103      	str	r1, [sp, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bfbb      	ittet	lt
 80040e8:	425b      	neglt	r3, r3
 80040ea:	f042 0202 	orrlt.w	r2, r2, #2
 80040ee:	9307      	strge	r3, [sp, #28]
 80040f0:	9307      	strlt	r3, [sp, #28]
 80040f2:	bfb8      	it	lt
 80040f4:	9204      	strlt	r2, [sp, #16]
 80040f6:	7823      	ldrb	r3, [r4, #0]
 80040f8:	2b2e      	cmp	r3, #46	; 0x2e
 80040fa:	d10c      	bne.n	8004116 <_vfiprintf_r+0x176>
 80040fc:	7863      	ldrb	r3, [r4, #1]
 80040fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004100:	d135      	bne.n	800416e <_vfiprintf_r+0x1ce>
 8004102:	9b03      	ldr	r3, [sp, #12]
 8004104:	3402      	adds	r4, #2
 8004106:	1d1a      	adds	r2, r3, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	9203      	str	r2, [sp, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	bfb8      	it	lt
 8004110:	f04f 33ff 	movlt.w	r3, #4294967295
 8004114:	9305      	str	r3, [sp, #20]
 8004116:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80041fc <_vfiprintf_r+0x25c>
 800411a:	2203      	movs	r2, #3
 800411c:	4650      	mov	r0, sl
 800411e:	7821      	ldrb	r1, [r4, #0]
 8004120:	f000 fcfa 	bl	8004b18 <memchr>
 8004124:	b140      	cbz	r0, 8004138 <_vfiprintf_r+0x198>
 8004126:	2340      	movs	r3, #64	; 0x40
 8004128:	eba0 000a 	sub.w	r0, r0, sl
 800412c:	fa03 f000 	lsl.w	r0, r3, r0
 8004130:	9b04      	ldr	r3, [sp, #16]
 8004132:	3401      	adds	r4, #1
 8004134:	4303      	orrs	r3, r0
 8004136:	9304      	str	r3, [sp, #16]
 8004138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800413c:	2206      	movs	r2, #6
 800413e:	482c      	ldr	r0, [pc, #176]	; (80041f0 <_vfiprintf_r+0x250>)
 8004140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004144:	f000 fce8 	bl	8004b18 <memchr>
 8004148:	2800      	cmp	r0, #0
 800414a:	d03f      	beq.n	80041cc <_vfiprintf_r+0x22c>
 800414c:	4b29      	ldr	r3, [pc, #164]	; (80041f4 <_vfiprintf_r+0x254>)
 800414e:	bb1b      	cbnz	r3, 8004198 <_vfiprintf_r+0x1f8>
 8004150:	9b03      	ldr	r3, [sp, #12]
 8004152:	3307      	adds	r3, #7
 8004154:	f023 0307 	bic.w	r3, r3, #7
 8004158:	3308      	adds	r3, #8
 800415a:	9303      	str	r3, [sp, #12]
 800415c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800415e:	443b      	add	r3, r7
 8004160:	9309      	str	r3, [sp, #36]	; 0x24
 8004162:	e767      	b.n	8004034 <_vfiprintf_r+0x94>
 8004164:	460c      	mov	r4, r1
 8004166:	2001      	movs	r0, #1
 8004168:	fb0c 3202 	mla	r2, ip, r2, r3
 800416c:	e7a5      	b.n	80040ba <_vfiprintf_r+0x11a>
 800416e:	2300      	movs	r3, #0
 8004170:	f04f 0c0a 	mov.w	ip, #10
 8004174:	4619      	mov	r1, r3
 8004176:	3401      	adds	r4, #1
 8004178:	9305      	str	r3, [sp, #20]
 800417a:	4620      	mov	r0, r4
 800417c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004180:	3a30      	subs	r2, #48	; 0x30
 8004182:	2a09      	cmp	r2, #9
 8004184:	d903      	bls.n	800418e <_vfiprintf_r+0x1ee>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0c5      	beq.n	8004116 <_vfiprintf_r+0x176>
 800418a:	9105      	str	r1, [sp, #20]
 800418c:	e7c3      	b.n	8004116 <_vfiprintf_r+0x176>
 800418e:	4604      	mov	r4, r0
 8004190:	2301      	movs	r3, #1
 8004192:	fb0c 2101 	mla	r1, ip, r1, r2
 8004196:	e7f0      	b.n	800417a <_vfiprintf_r+0x1da>
 8004198:	ab03      	add	r3, sp, #12
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	462a      	mov	r2, r5
 800419e:	4630      	mov	r0, r6
 80041a0:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <_vfiprintf_r+0x258>)
 80041a2:	a904      	add	r1, sp, #16
 80041a4:	f3af 8000 	nop.w
 80041a8:	4607      	mov	r7, r0
 80041aa:	1c78      	adds	r0, r7, #1
 80041ac:	d1d6      	bne.n	800415c <_vfiprintf_r+0x1bc>
 80041ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041b0:	07d9      	lsls	r1, r3, #31
 80041b2:	d405      	bmi.n	80041c0 <_vfiprintf_r+0x220>
 80041b4:	89ab      	ldrh	r3, [r5, #12]
 80041b6:	059a      	lsls	r2, r3, #22
 80041b8:	d402      	bmi.n	80041c0 <_vfiprintf_r+0x220>
 80041ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041bc:	f000 fc47 	bl	8004a4e <__retarget_lock_release_recursive>
 80041c0:	89ab      	ldrh	r3, [r5, #12]
 80041c2:	065b      	lsls	r3, r3, #25
 80041c4:	f53f af12 	bmi.w	8003fec <_vfiprintf_r+0x4c>
 80041c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ca:	e711      	b.n	8003ff0 <_vfiprintf_r+0x50>
 80041cc:	ab03      	add	r3, sp, #12
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	462a      	mov	r2, r5
 80041d2:	4630      	mov	r0, r6
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <_vfiprintf_r+0x258>)
 80041d6:	a904      	add	r1, sp, #16
 80041d8:	f000 f882 	bl	80042e0 <_printf_i>
 80041dc:	e7e4      	b.n	80041a8 <_vfiprintf_r+0x208>
 80041de:	bf00      	nop
 80041e0:	08004f4c 	.word	0x08004f4c
 80041e4:	08004f6c 	.word	0x08004f6c
 80041e8:	08004f2c 	.word	0x08004f2c
 80041ec:	08004ef6 	.word	0x08004ef6
 80041f0:	08004f00 	.word	0x08004f00
 80041f4:	00000000 	.word	0x00000000
 80041f8:	08003f7b 	.word	0x08003f7b
 80041fc:	08004efc 	.word	0x08004efc

08004200 <_printf_common>:
 8004200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004204:	4616      	mov	r6, r2
 8004206:	4699      	mov	r9, r3
 8004208:	688a      	ldr	r2, [r1, #8]
 800420a:	690b      	ldr	r3, [r1, #16]
 800420c:	4607      	mov	r7, r0
 800420e:	4293      	cmp	r3, r2
 8004210:	bfb8      	it	lt
 8004212:	4613      	movlt	r3, r2
 8004214:	6033      	str	r3, [r6, #0]
 8004216:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800421a:	460c      	mov	r4, r1
 800421c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004220:	b10a      	cbz	r2, 8004226 <_printf_common+0x26>
 8004222:	3301      	adds	r3, #1
 8004224:	6033      	str	r3, [r6, #0]
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	0699      	lsls	r1, r3, #26
 800422a:	bf42      	ittt	mi
 800422c:	6833      	ldrmi	r3, [r6, #0]
 800422e:	3302      	addmi	r3, #2
 8004230:	6033      	strmi	r3, [r6, #0]
 8004232:	6825      	ldr	r5, [r4, #0]
 8004234:	f015 0506 	ands.w	r5, r5, #6
 8004238:	d106      	bne.n	8004248 <_printf_common+0x48>
 800423a:	f104 0a19 	add.w	sl, r4, #25
 800423e:	68e3      	ldr	r3, [r4, #12]
 8004240:	6832      	ldr	r2, [r6, #0]
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	42ab      	cmp	r3, r5
 8004246:	dc28      	bgt.n	800429a <_printf_common+0x9a>
 8004248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800424c:	1e13      	subs	r3, r2, #0
 800424e:	6822      	ldr	r2, [r4, #0]
 8004250:	bf18      	it	ne
 8004252:	2301      	movne	r3, #1
 8004254:	0692      	lsls	r2, r2, #26
 8004256:	d42d      	bmi.n	80042b4 <_printf_common+0xb4>
 8004258:	4649      	mov	r1, r9
 800425a:	4638      	mov	r0, r7
 800425c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004260:	47c0      	blx	r8
 8004262:	3001      	adds	r0, #1
 8004264:	d020      	beq.n	80042a8 <_printf_common+0xa8>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	68e5      	ldr	r5, [r4, #12]
 800426a:	f003 0306 	and.w	r3, r3, #6
 800426e:	2b04      	cmp	r3, #4
 8004270:	bf18      	it	ne
 8004272:	2500      	movne	r5, #0
 8004274:	6832      	ldr	r2, [r6, #0]
 8004276:	f04f 0600 	mov.w	r6, #0
 800427a:	68a3      	ldr	r3, [r4, #8]
 800427c:	bf08      	it	eq
 800427e:	1aad      	subeq	r5, r5, r2
 8004280:	6922      	ldr	r2, [r4, #16]
 8004282:	bf08      	it	eq
 8004284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004288:	4293      	cmp	r3, r2
 800428a:	bfc4      	itt	gt
 800428c:	1a9b      	subgt	r3, r3, r2
 800428e:	18ed      	addgt	r5, r5, r3
 8004290:	341a      	adds	r4, #26
 8004292:	42b5      	cmp	r5, r6
 8004294:	d11a      	bne.n	80042cc <_printf_common+0xcc>
 8004296:	2000      	movs	r0, #0
 8004298:	e008      	b.n	80042ac <_printf_common+0xac>
 800429a:	2301      	movs	r3, #1
 800429c:	4652      	mov	r2, sl
 800429e:	4649      	mov	r1, r9
 80042a0:	4638      	mov	r0, r7
 80042a2:	47c0      	blx	r8
 80042a4:	3001      	adds	r0, #1
 80042a6:	d103      	bne.n	80042b0 <_printf_common+0xb0>
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b0:	3501      	adds	r5, #1
 80042b2:	e7c4      	b.n	800423e <_printf_common+0x3e>
 80042b4:	2030      	movs	r0, #48	; 0x30
 80042b6:	18e1      	adds	r1, r4, r3
 80042b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042c2:	4422      	add	r2, r4
 80042c4:	3302      	adds	r3, #2
 80042c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042ca:	e7c5      	b.n	8004258 <_printf_common+0x58>
 80042cc:	2301      	movs	r3, #1
 80042ce:	4622      	mov	r2, r4
 80042d0:	4649      	mov	r1, r9
 80042d2:	4638      	mov	r0, r7
 80042d4:	47c0      	blx	r8
 80042d6:	3001      	adds	r0, #1
 80042d8:	d0e6      	beq.n	80042a8 <_printf_common+0xa8>
 80042da:	3601      	adds	r6, #1
 80042dc:	e7d9      	b.n	8004292 <_printf_common+0x92>
	...

080042e0 <_printf_i>:
 80042e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042e4:	460c      	mov	r4, r1
 80042e6:	7e27      	ldrb	r7, [r4, #24]
 80042e8:	4691      	mov	r9, r2
 80042ea:	2f78      	cmp	r7, #120	; 0x78
 80042ec:	4680      	mov	r8, r0
 80042ee:	469a      	mov	sl, r3
 80042f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042f6:	d807      	bhi.n	8004308 <_printf_i+0x28>
 80042f8:	2f62      	cmp	r7, #98	; 0x62
 80042fa:	d80a      	bhi.n	8004312 <_printf_i+0x32>
 80042fc:	2f00      	cmp	r7, #0
 80042fe:	f000 80d9 	beq.w	80044b4 <_printf_i+0x1d4>
 8004302:	2f58      	cmp	r7, #88	; 0x58
 8004304:	f000 80a4 	beq.w	8004450 <_printf_i+0x170>
 8004308:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800430c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004310:	e03a      	b.n	8004388 <_printf_i+0xa8>
 8004312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004316:	2b15      	cmp	r3, #21
 8004318:	d8f6      	bhi.n	8004308 <_printf_i+0x28>
 800431a:	a001      	add	r0, pc, #4	; (adr r0, 8004320 <_printf_i+0x40>)
 800431c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004320:	08004379 	.word	0x08004379
 8004324:	0800438d 	.word	0x0800438d
 8004328:	08004309 	.word	0x08004309
 800432c:	08004309 	.word	0x08004309
 8004330:	08004309 	.word	0x08004309
 8004334:	08004309 	.word	0x08004309
 8004338:	0800438d 	.word	0x0800438d
 800433c:	08004309 	.word	0x08004309
 8004340:	08004309 	.word	0x08004309
 8004344:	08004309 	.word	0x08004309
 8004348:	08004309 	.word	0x08004309
 800434c:	0800449b 	.word	0x0800449b
 8004350:	080043bd 	.word	0x080043bd
 8004354:	0800447d 	.word	0x0800447d
 8004358:	08004309 	.word	0x08004309
 800435c:	08004309 	.word	0x08004309
 8004360:	080044bd 	.word	0x080044bd
 8004364:	08004309 	.word	0x08004309
 8004368:	080043bd 	.word	0x080043bd
 800436c:	08004309 	.word	0x08004309
 8004370:	08004309 	.word	0x08004309
 8004374:	08004485 	.word	0x08004485
 8004378:	680b      	ldr	r3, [r1, #0]
 800437a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800437e:	1d1a      	adds	r2, r3, #4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	600a      	str	r2, [r1, #0]
 8004384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004388:	2301      	movs	r3, #1
 800438a:	e0a4      	b.n	80044d6 <_printf_i+0x1f6>
 800438c:	6825      	ldr	r5, [r4, #0]
 800438e:	6808      	ldr	r0, [r1, #0]
 8004390:	062e      	lsls	r6, r5, #24
 8004392:	f100 0304 	add.w	r3, r0, #4
 8004396:	d50a      	bpl.n	80043ae <_printf_i+0xce>
 8004398:	6805      	ldr	r5, [r0, #0]
 800439a:	600b      	str	r3, [r1, #0]
 800439c:	2d00      	cmp	r5, #0
 800439e:	da03      	bge.n	80043a8 <_printf_i+0xc8>
 80043a0:	232d      	movs	r3, #45	; 0x2d
 80043a2:	426d      	negs	r5, r5
 80043a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043a8:	230a      	movs	r3, #10
 80043aa:	485e      	ldr	r0, [pc, #376]	; (8004524 <_printf_i+0x244>)
 80043ac:	e019      	b.n	80043e2 <_printf_i+0x102>
 80043ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80043b2:	6805      	ldr	r5, [r0, #0]
 80043b4:	600b      	str	r3, [r1, #0]
 80043b6:	bf18      	it	ne
 80043b8:	b22d      	sxthne	r5, r5
 80043ba:	e7ef      	b.n	800439c <_printf_i+0xbc>
 80043bc:	680b      	ldr	r3, [r1, #0]
 80043be:	6825      	ldr	r5, [r4, #0]
 80043c0:	1d18      	adds	r0, r3, #4
 80043c2:	6008      	str	r0, [r1, #0]
 80043c4:	0628      	lsls	r0, r5, #24
 80043c6:	d501      	bpl.n	80043cc <_printf_i+0xec>
 80043c8:	681d      	ldr	r5, [r3, #0]
 80043ca:	e002      	b.n	80043d2 <_printf_i+0xf2>
 80043cc:	0669      	lsls	r1, r5, #25
 80043ce:	d5fb      	bpl.n	80043c8 <_printf_i+0xe8>
 80043d0:	881d      	ldrh	r5, [r3, #0]
 80043d2:	2f6f      	cmp	r7, #111	; 0x6f
 80043d4:	bf0c      	ite	eq
 80043d6:	2308      	moveq	r3, #8
 80043d8:	230a      	movne	r3, #10
 80043da:	4852      	ldr	r0, [pc, #328]	; (8004524 <_printf_i+0x244>)
 80043dc:	2100      	movs	r1, #0
 80043de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043e2:	6866      	ldr	r6, [r4, #4]
 80043e4:	2e00      	cmp	r6, #0
 80043e6:	bfa8      	it	ge
 80043e8:	6821      	ldrge	r1, [r4, #0]
 80043ea:	60a6      	str	r6, [r4, #8]
 80043ec:	bfa4      	itt	ge
 80043ee:	f021 0104 	bicge.w	r1, r1, #4
 80043f2:	6021      	strge	r1, [r4, #0]
 80043f4:	b90d      	cbnz	r5, 80043fa <_printf_i+0x11a>
 80043f6:	2e00      	cmp	r6, #0
 80043f8:	d04d      	beq.n	8004496 <_printf_i+0x1b6>
 80043fa:	4616      	mov	r6, r2
 80043fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004400:	fb03 5711 	mls	r7, r3, r1, r5
 8004404:	5dc7      	ldrb	r7, [r0, r7]
 8004406:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800440a:	462f      	mov	r7, r5
 800440c:	42bb      	cmp	r3, r7
 800440e:	460d      	mov	r5, r1
 8004410:	d9f4      	bls.n	80043fc <_printf_i+0x11c>
 8004412:	2b08      	cmp	r3, #8
 8004414:	d10b      	bne.n	800442e <_printf_i+0x14e>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	07df      	lsls	r7, r3, #31
 800441a:	d508      	bpl.n	800442e <_printf_i+0x14e>
 800441c:	6923      	ldr	r3, [r4, #16]
 800441e:	6861      	ldr	r1, [r4, #4]
 8004420:	4299      	cmp	r1, r3
 8004422:	bfde      	ittt	le
 8004424:	2330      	movle	r3, #48	; 0x30
 8004426:	f806 3c01 	strble.w	r3, [r6, #-1]
 800442a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800442e:	1b92      	subs	r2, r2, r6
 8004430:	6122      	str	r2, [r4, #16]
 8004432:	464b      	mov	r3, r9
 8004434:	4621      	mov	r1, r4
 8004436:	4640      	mov	r0, r8
 8004438:	f8cd a000 	str.w	sl, [sp]
 800443c:	aa03      	add	r2, sp, #12
 800443e:	f7ff fedf 	bl	8004200 <_printf_common>
 8004442:	3001      	adds	r0, #1
 8004444:	d14c      	bne.n	80044e0 <_printf_i+0x200>
 8004446:	f04f 30ff 	mov.w	r0, #4294967295
 800444a:	b004      	add	sp, #16
 800444c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004450:	4834      	ldr	r0, [pc, #208]	; (8004524 <_printf_i+0x244>)
 8004452:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004456:	680e      	ldr	r6, [r1, #0]
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	f856 5b04 	ldr.w	r5, [r6], #4
 800445e:	061f      	lsls	r7, r3, #24
 8004460:	600e      	str	r6, [r1, #0]
 8004462:	d514      	bpl.n	800448e <_printf_i+0x1ae>
 8004464:	07d9      	lsls	r1, r3, #31
 8004466:	bf44      	itt	mi
 8004468:	f043 0320 	orrmi.w	r3, r3, #32
 800446c:	6023      	strmi	r3, [r4, #0]
 800446e:	b91d      	cbnz	r5, 8004478 <_printf_i+0x198>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	f023 0320 	bic.w	r3, r3, #32
 8004476:	6023      	str	r3, [r4, #0]
 8004478:	2310      	movs	r3, #16
 800447a:	e7af      	b.n	80043dc <_printf_i+0xfc>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	f043 0320 	orr.w	r3, r3, #32
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	2378      	movs	r3, #120	; 0x78
 8004486:	4828      	ldr	r0, [pc, #160]	; (8004528 <_printf_i+0x248>)
 8004488:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800448c:	e7e3      	b.n	8004456 <_printf_i+0x176>
 800448e:	065e      	lsls	r6, r3, #25
 8004490:	bf48      	it	mi
 8004492:	b2ad      	uxthmi	r5, r5
 8004494:	e7e6      	b.n	8004464 <_printf_i+0x184>
 8004496:	4616      	mov	r6, r2
 8004498:	e7bb      	b.n	8004412 <_printf_i+0x132>
 800449a:	680b      	ldr	r3, [r1, #0]
 800449c:	6826      	ldr	r6, [r4, #0]
 800449e:	1d1d      	adds	r5, r3, #4
 80044a0:	6960      	ldr	r0, [r4, #20]
 80044a2:	600d      	str	r5, [r1, #0]
 80044a4:	0635      	lsls	r5, r6, #24
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	d501      	bpl.n	80044ae <_printf_i+0x1ce>
 80044aa:	6018      	str	r0, [r3, #0]
 80044ac:	e002      	b.n	80044b4 <_printf_i+0x1d4>
 80044ae:	0671      	lsls	r1, r6, #25
 80044b0:	d5fb      	bpl.n	80044aa <_printf_i+0x1ca>
 80044b2:	8018      	strh	r0, [r3, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	4616      	mov	r6, r2
 80044b8:	6123      	str	r3, [r4, #16]
 80044ba:	e7ba      	b.n	8004432 <_printf_i+0x152>
 80044bc:	680b      	ldr	r3, [r1, #0]
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	600a      	str	r2, [r1, #0]
 80044c2:	681e      	ldr	r6, [r3, #0]
 80044c4:	2100      	movs	r1, #0
 80044c6:	4630      	mov	r0, r6
 80044c8:	6862      	ldr	r2, [r4, #4]
 80044ca:	f000 fb25 	bl	8004b18 <memchr>
 80044ce:	b108      	cbz	r0, 80044d4 <_printf_i+0x1f4>
 80044d0:	1b80      	subs	r0, r0, r6
 80044d2:	6060      	str	r0, [r4, #4]
 80044d4:	6863      	ldr	r3, [r4, #4]
 80044d6:	6123      	str	r3, [r4, #16]
 80044d8:	2300      	movs	r3, #0
 80044da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044de:	e7a8      	b.n	8004432 <_printf_i+0x152>
 80044e0:	4632      	mov	r2, r6
 80044e2:	4649      	mov	r1, r9
 80044e4:	4640      	mov	r0, r8
 80044e6:	6923      	ldr	r3, [r4, #16]
 80044e8:	47d0      	blx	sl
 80044ea:	3001      	adds	r0, #1
 80044ec:	d0ab      	beq.n	8004446 <_printf_i+0x166>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	079b      	lsls	r3, r3, #30
 80044f2:	d413      	bmi.n	800451c <_printf_i+0x23c>
 80044f4:	68e0      	ldr	r0, [r4, #12]
 80044f6:	9b03      	ldr	r3, [sp, #12]
 80044f8:	4298      	cmp	r0, r3
 80044fa:	bfb8      	it	lt
 80044fc:	4618      	movlt	r0, r3
 80044fe:	e7a4      	b.n	800444a <_printf_i+0x16a>
 8004500:	2301      	movs	r3, #1
 8004502:	4632      	mov	r2, r6
 8004504:	4649      	mov	r1, r9
 8004506:	4640      	mov	r0, r8
 8004508:	47d0      	blx	sl
 800450a:	3001      	adds	r0, #1
 800450c:	d09b      	beq.n	8004446 <_printf_i+0x166>
 800450e:	3501      	adds	r5, #1
 8004510:	68e3      	ldr	r3, [r4, #12]
 8004512:	9903      	ldr	r1, [sp, #12]
 8004514:	1a5b      	subs	r3, r3, r1
 8004516:	42ab      	cmp	r3, r5
 8004518:	dcf2      	bgt.n	8004500 <_printf_i+0x220>
 800451a:	e7eb      	b.n	80044f4 <_printf_i+0x214>
 800451c:	2500      	movs	r5, #0
 800451e:	f104 0619 	add.w	r6, r4, #25
 8004522:	e7f5      	b.n	8004510 <_printf_i+0x230>
 8004524:	08004f07 	.word	0x08004f07
 8004528:	08004f18 	.word	0x08004f18

0800452c <_sbrk_r>:
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	2300      	movs	r3, #0
 8004530:	4d05      	ldr	r5, [pc, #20]	; (8004548 <_sbrk_r+0x1c>)
 8004532:	4604      	mov	r4, r0
 8004534:	4608      	mov	r0, r1
 8004536:	602b      	str	r3, [r5, #0]
 8004538:	f7fc fc98 	bl	8000e6c <_sbrk>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <_sbrk_r+0x1a>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	b103      	cbz	r3, 8004546 <_sbrk_r+0x1a>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	20000250 	.word	0x20000250

0800454c <__swbuf_r>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	460e      	mov	r6, r1
 8004550:	4614      	mov	r4, r2
 8004552:	4605      	mov	r5, r0
 8004554:	b118      	cbz	r0, 800455e <__swbuf_r+0x12>
 8004556:	6983      	ldr	r3, [r0, #24]
 8004558:	b90b      	cbnz	r3, 800455e <__swbuf_r+0x12>
 800455a:	f000 f9d9 	bl	8004910 <__sinit>
 800455e:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <__swbuf_r+0x98>)
 8004560:	429c      	cmp	r4, r3
 8004562:	d12b      	bne.n	80045bc <__swbuf_r+0x70>
 8004564:	686c      	ldr	r4, [r5, #4]
 8004566:	69a3      	ldr	r3, [r4, #24]
 8004568:	60a3      	str	r3, [r4, #8]
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	071a      	lsls	r2, r3, #28
 800456e:	d52f      	bpl.n	80045d0 <__swbuf_r+0x84>
 8004570:	6923      	ldr	r3, [r4, #16]
 8004572:	b36b      	cbz	r3, 80045d0 <__swbuf_r+0x84>
 8004574:	6923      	ldr	r3, [r4, #16]
 8004576:	6820      	ldr	r0, [r4, #0]
 8004578:	b2f6      	uxtb	r6, r6
 800457a:	1ac0      	subs	r0, r0, r3
 800457c:	6963      	ldr	r3, [r4, #20]
 800457e:	4637      	mov	r7, r6
 8004580:	4283      	cmp	r3, r0
 8004582:	dc04      	bgt.n	800458e <__swbuf_r+0x42>
 8004584:	4621      	mov	r1, r4
 8004586:	4628      	mov	r0, r5
 8004588:	f000 f92e 	bl	80047e8 <_fflush_r>
 800458c:	bb30      	cbnz	r0, 80045dc <__swbuf_r+0x90>
 800458e:	68a3      	ldr	r3, [r4, #8]
 8004590:	3001      	adds	r0, #1
 8004592:	3b01      	subs	r3, #1
 8004594:	60a3      	str	r3, [r4, #8]
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	6022      	str	r2, [r4, #0]
 800459c:	701e      	strb	r6, [r3, #0]
 800459e:	6963      	ldr	r3, [r4, #20]
 80045a0:	4283      	cmp	r3, r0
 80045a2:	d004      	beq.n	80045ae <__swbuf_r+0x62>
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	07db      	lsls	r3, r3, #31
 80045a8:	d506      	bpl.n	80045b8 <__swbuf_r+0x6c>
 80045aa:	2e0a      	cmp	r6, #10
 80045ac:	d104      	bne.n	80045b8 <__swbuf_r+0x6c>
 80045ae:	4621      	mov	r1, r4
 80045b0:	4628      	mov	r0, r5
 80045b2:	f000 f919 	bl	80047e8 <_fflush_r>
 80045b6:	b988      	cbnz	r0, 80045dc <__swbuf_r+0x90>
 80045b8:	4638      	mov	r0, r7
 80045ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <__swbuf_r+0x9c>)
 80045be:	429c      	cmp	r4, r3
 80045c0:	d101      	bne.n	80045c6 <__swbuf_r+0x7a>
 80045c2:	68ac      	ldr	r4, [r5, #8]
 80045c4:	e7cf      	b.n	8004566 <__swbuf_r+0x1a>
 80045c6:	4b09      	ldr	r3, [pc, #36]	; (80045ec <__swbuf_r+0xa0>)
 80045c8:	429c      	cmp	r4, r3
 80045ca:	bf08      	it	eq
 80045cc:	68ec      	ldreq	r4, [r5, #12]
 80045ce:	e7ca      	b.n	8004566 <__swbuf_r+0x1a>
 80045d0:	4621      	mov	r1, r4
 80045d2:	4628      	mov	r0, r5
 80045d4:	f000 f80c 	bl	80045f0 <__swsetup_r>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d0cb      	beq.n	8004574 <__swbuf_r+0x28>
 80045dc:	f04f 37ff 	mov.w	r7, #4294967295
 80045e0:	e7ea      	b.n	80045b8 <__swbuf_r+0x6c>
 80045e2:	bf00      	nop
 80045e4:	08004f4c 	.word	0x08004f4c
 80045e8:	08004f6c 	.word	0x08004f6c
 80045ec:	08004f2c 	.word	0x08004f2c

080045f0 <__swsetup_r>:
 80045f0:	4b32      	ldr	r3, [pc, #200]	; (80046bc <__swsetup_r+0xcc>)
 80045f2:	b570      	push	{r4, r5, r6, lr}
 80045f4:	681d      	ldr	r5, [r3, #0]
 80045f6:	4606      	mov	r6, r0
 80045f8:	460c      	mov	r4, r1
 80045fa:	b125      	cbz	r5, 8004606 <__swsetup_r+0x16>
 80045fc:	69ab      	ldr	r3, [r5, #24]
 80045fe:	b913      	cbnz	r3, 8004606 <__swsetup_r+0x16>
 8004600:	4628      	mov	r0, r5
 8004602:	f000 f985 	bl	8004910 <__sinit>
 8004606:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <__swsetup_r+0xd0>)
 8004608:	429c      	cmp	r4, r3
 800460a:	d10f      	bne.n	800462c <__swsetup_r+0x3c>
 800460c:	686c      	ldr	r4, [r5, #4]
 800460e:	89a3      	ldrh	r3, [r4, #12]
 8004610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004614:	0719      	lsls	r1, r3, #28
 8004616:	d42c      	bmi.n	8004672 <__swsetup_r+0x82>
 8004618:	06dd      	lsls	r5, r3, #27
 800461a:	d411      	bmi.n	8004640 <__swsetup_r+0x50>
 800461c:	2309      	movs	r3, #9
 800461e:	6033      	str	r3, [r6, #0]
 8004620:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	81a3      	strh	r3, [r4, #12]
 800462a:	e03e      	b.n	80046aa <__swsetup_r+0xba>
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <__swsetup_r+0xd4>)
 800462e:	429c      	cmp	r4, r3
 8004630:	d101      	bne.n	8004636 <__swsetup_r+0x46>
 8004632:	68ac      	ldr	r4, [r5, #8]
 8004634:	e7eb      	b.n	800460e <__swsetup_r+0x1e>
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <__swsetup_r+0xd8>)
 8004638:	429c      	cmp	r4, r3
 800463a:	bf08      	it	eq
 800463c:	68ec      	ldreq	r4, [r5, #12]
 800463e:	e7e6      	b.n	800460e <__swsetup_r+0x1e>
 8004640:	0758      	lsls	r0, r3, #29
 8004642:	d512      	bpl.n	800466a <__swsetup_r+0x7a>
 8004644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004646:	b141      	cbz	r1, 800465a <__swsetup_r+0x6a>
 8004648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800464c:	4299      	cmp	r1, r3
 800464e:	d002      	beq.n	8004656 <__swsetup_r+0x66>
 8004650:	4630      	mov	r0, r6
 8004652:	f7ff fa7b 	bl	8003b4c <_free_r>
 8004656:	2300      	movs	r3, #0
 8004658:	6363      	str	r3, [r4, #52]	; 0x34
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004660:	81a3      	strh	r3, [r4, #12]
 8004662:	2300      	movs	r3, #0
 8004664:	6063      	str	r3, [r4, #4]
 8004666:	6923      	ldr	r3, [r4, #16]
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	f043 0308 	orr.w	r3, r3, #8
 8004670:	81a3      	strh	r3, [r4, #12]
 8004672:	6923      	ldr	r3, [r4, #16]
 8004674:	b94b      	cbnz	r3, 800468a <__swsetup_r+0x9a>
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800467c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004680:	d003      	beq.n	800468a <__swsetup_r+0x9a>
 8004682:	4621      	mov	r1, r4
 8004684:	4630      	mov	r0, r6
 8004686:	f000 fa07 	bl	8004a98 <__smakebuf_r>
 800468a:	89a0      	ldrh	r0, [r4, #12]
 800468c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004690:	f010 0301 	ands.w	r3, r0, #1
 8004694:	d00a      	beq.n	80046ac <__swsetup_r+0xbc>
 8004696:	2300      	movs	r3, #0
 8004698:	60a3      	str	r3, [r4, #8]
 800469a:	6963      	ldr	r3, [r4, #20]
 800469c:	425b      	negs	r3, r3
 800469e:	61a3      	str	r3, [r4, #24]
 80046a0:	6923      	ldr	r3, [r4, #16]
 80046a2:	b943      	cbnz	r3, 80046b6 <__swsetup_r+0xc6>
 80046a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046a8:	d1ba      	bne.n	8004620 <__swsetup_r+0x30>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	0781      	lsls	r1, r0, #30
 80046ae:	bf58      	it	pl
 80046b0:	6963      	ldrpl	r3, [r4, #20]
 80046b2:	60a3      	str	r3, [r4, #8]
 80046b4:	e7f4      	b.n	80046a0 <__swsetup_r+0xb0>
 80046b6:	2000      	movs	r0, #0
 80046b8:	e7f7      	b.n	80046aa <__swsetup_r+0xba>
 80046ba:	bf00      	nop
 80046bc:	20000014 	.word	0x20000014
 80046c0:	08004f4c 	.word	0x08004f4c
 80046c4:	08004f6c 	.word	0x08004f6c
 80046c8:	08004f2c 	.word	0x08004f2c

080046cc <abort>:
 80046cc:	2006      	movs	r0, #6
 80046ce:	b508      	push	{r3, lr}
 80046d0:	f000 fab2 	bl	8004c38 <raise>
 80046d4:	2001      	movs	r0, #1
 80046d6:	f7fc fb56 	bl	8000d86 <_exit>
	...

080046dc <__sflush_r>:
 80046dc:	898a      	ldrh	r2, [r1, #12]
 80046de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e2:	4605      	mov	r5, r0
 80046e4:	0710      	lsls	r0, r2, #28
 80046e6:	460c      	mov	r4, r1
 80046e8:	d458      	bmi.n	800479c <__sflush_r+0xc0>
 80046ea:	684b      	ldr	r3, [r1, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	dc05      	bgt.n	80046fc <__sflush_r+0x20>
 80046f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	dc02      	bgt.n	80046fc <__sflush_r+0x20>
 80046f6:	2000      	movs	r0, #0
 80046f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046fe:	2e00      	cmp	r6, #0
 8004700:	d0f9      	beq.n	80046f6 <__sflush_r+0x1a>
 8004702:	2300      	movs	r3, #0
 8004704:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004708:	682f      	ldr	r7, [r5, #0]
 800470a:	602b      	str	r3, [r5, #0]
 800470c:	d032      	beq.n	8004774 <__sflush_r+0x98>
 800470e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	075a      	lsls	r2, r3, #29
 8004714:	d505      	bpl.n	8004722 <__sflush_r+0x46>
 8004716:	6863      	ldr	r3, [r4, #4]
 8004718:	1ac0      	subs	r0, r0, r3
 800471a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800471c:	b10b      	cbz	r3, 8004722 <__sflush_r+0x46>
 800471e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004720:	1ac0      	subs	r0, r0, r3
 8004722:	2300      	movs	r3, #0
 8004724:	4602      	mov	r2, r0
 8004726:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004728:	4628      	mov	r0, r5
 800472a:	6a21      	ldr	r1, [r4, #32]
 800472c:	47b0      	blx	r6
 800472e:	1c43      	adds	r3, r0, #1
 8004730:	89a3      	ldrh	r3, [r4, #12]
 8004732:	d106      	bne.n	8004742 <__sflush_r+0x66>
 8004734:	6829      	ldr	r1, [r5, #0]
 8004736:	291d      	cmp	r1, #29
 8004738:	d82c      	bhi.n	8004794 <__sflush_r+0xb8>
 800473a:	4a2a      	ldr	r2, [pc, #168]	; (80047e4 <__sflush_r+0x108>)
 800473c:	40ca      	lsrs	r2, r1
 800473e:	07d6      	lsls	r6, r2, #31
 8004740:	d528      	bpl.n	8004794 <__sflush_r+0xb8>
 8004742:	2200      	movs	r2, #0
 8004744:	6062      	str	r2, [r4, #4]
 8004746:	6922      	ldr	r2, [r4, #16]
 8004748:	04d9      	lsls	r1, r3, #19
 800474a:	6022      	str	r2, [r4, #0]
 800474c:	d504      	bpl.n	8004758 <__sflush_r+0x7c>
 800474e:	1c42      	adds	r2, r0, #1
 8004750:	d101      	bne.n	8004756 <__sflush_r+0x7a>
 8004752:	682b      	ldr	r3, [r5, #0]
 8004754:	b903      	cbnz	r3, 8004758 <__sflush_r+0x7c>
 8004756:	6560      	str	r0, [r4, #84]	; 0x54
 8004758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800475a:	602f      	str	r7, [r5, #0]
 800475c:	2900      	cmp	r1, #0
 800475e:	d0ca      	beq.n	80046f6 <__sflush_r+0x1a>
 8004760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004764:	4299      	cmp	r1, r3
 8004766:	d002      	beq.n	800476e <__sflush_r+0x92>
 8004768:	4628      	mov	r0, r5
 800476a:	f7ff f9ef 	bl	8003b4c <_free_r>
 800476e:	2000      	movs	r0, #0
 8004770:	6360      	str	r0, [r4, #52]	; 0x34
 8004772:	e7c1      	b.n	80046f8 <__sflush_r+0x1c>
 8004774:	6a21      	ldr	r1, [r4, #32]
 8004776:	2301      	movs	r3, #1
 8004778:	4628      	mov	r0, r5
 800477a:	47b0      	blx	r6
 800477c:	1c41      	adds	r1, r0, #1
 800477e:	d1c7      	bne.n	8004710 <__sflush_r+0x34>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0c4      	beq.n	8004710 <__sflush_r+0x34>
 8004786:	2b1d      	cmp	r3, #29
 8004788:	d001      	beq.n	800478e <__sflush_r+0xb2>
 800478a:	2b16      	cmp	r3, #22
 800478c:	d101      	bne.n	8004792 <__sflush_r+0xb6>
 800478e:	602f      	str	r7, [r5, #0]
 8004790:	e7b1      	b.n	80046f6 <__sflush_r+0x1a>
 8004792:	89a3      	ldrh	r3, [r4, #12]
 8004794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004798:	81a3      	strh	r3, [r4, #12]
 800479a:	e7ad      	b.n	80046f8 <__sflush_r+0x1c>
 800479c:	690f      	ldr	r7, [r1, #16]
 800479e:	2f00      	cmp	r7, #0
 80047a0:	d0a9      	beq.n	80046f6 <__sflush_r+0x1a>
 80047a2:	0793      	lsls	r3, r2, #30
 80047a4:	bf18      	it	ne
 80047a6:	2300      	movne	r3, #0
 80047a8:	680e      	ldr	r6, [r1, #0]
 80047aa:	bf08      	it	eq
 80047ac:	694b      	ldreq	r3, [r1, #20]
 80047ae:	eba6 0807 	sub.w	r8, r6, r7
 80047b2:	600f      	str	r7, [r1, #0]
 80047b4:	608b      	str	r3, [r1, #8]
 80047b6:	f1b8 0f00 	cmp.w	r8, #0
 80047ba:	dd9c      	ble.n	80046f6 <__sflush_r+0x1a>
 80047bc:	4643      	mov	r3, r8
 80047be:	463a      	mov	r2, r7
 80047c0:	4628      	mov	r0, r5
 80047c2:	6a21      	ldr	r1, [r4, #32]
 80047c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047c6:	47b0      	blx	r6
 80047c8:	2800      	cmp	r0, #0
 80047ca:	dc06      	bgt.n	80047da <__sflush_r+0xfe>
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	f04f 30ff 	mov.w	r0, #4294967295
 80047d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d6:	81a3      	strh	r3, [r4, #12]
 80047d8:	e78e      	b.n	80046f8 <__sflush_r+0x1c>
 80047da:	4407      	add	r7, r0
 80047dc:	eba8 0800 	sub.w	r8, r8, r0
 80047e0:	e7e9      	b.n	80047b6 <__sflush_r+0xda>
 80047e2:	bf00      	nop
 80047e4:	20400001 	.word	0x20400001

080047e8 <_fflush_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	690b      	ldr	r3, [r1, #16]
 80047ec:	4605      	mov	r5, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	b913      	cbnz	r3, 80047f8 <_fflush_r+0x10>
 80047f2:	2500      	movs	r5, #0
 80047f4:	4628      	mov	r0, r5
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	b118      	cbz	r0, 8004802 <_fflush_r+0x1a>
 80047fa:	6983      	ldr	r3, [r0, #24]
 80047fc:	b90b      	cbnz	r3, 8004802 <_fflush_r+0x1a>
 80047fe:	f000 f887 	bl	8004910 <__sinit>
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <_fflush_r+0x6c>)
 8004804:	429c      	cmp	r4, r3
 8004806:	d11b      	bne.n	8004840 <_fflush_r+0x58>
 8004808:	686c      	ldr	r4, [r5, #4]
 800480a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0ef      	beq.n	80047f2 <_fflush_r+0xa>
 8004812:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004814:	07d0      	lsls	r0, r2, #31
 8004816:	d404      	bmi.n	8004822 <_fflush_r+0x3a>
 8004818:	0599      	lsls	r1, r3, #22
 800481a:	d402      	bmi.n	8004822 <_fflush_r+0x3a>
 800481c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800481e:	f000 f915 	bl	8004a4c <__retarget_lock_acquire_recursive>
 8004822:	4628      	mov	r0, r5
 8004824:	4621      	mov	r1, r4
 8004826:	f7ff ff59 	bl	80046dc <__sflush_r>
 800482a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800482c:	4605      	mov	r5, r0
 800482e:	07da      	lsls	r2, r3, #31
 8004830:	d4e0      	bmi.n	80047f4 <_fflush_r+0xc>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	059b      	lsls	r3, r3, #22
 8004836:	d4dd      	bmi.n	80047f4 <_fflush_r+0xc>
 8004838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800483a:	f000 f908 	bl	8004a4e <__retarget_lock_release_recursive>
 800483e:	e7d9      	b.n	80047f4 <_fflush_r+0xc>
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <_fflush_r+0x70>)
 8004842:	429c      	cmp	r4, r3
 8004844:	d101      	bne.n	800484a <_fflush_r+0x62>
 8004846:	68ac      	ldr	r4, [r5, #8]
 8004848:	e7df      	b.n	800480a <_fflush_r+0x22>
 800484a:	4b04      	ldr	r3, [pc, #16]	; (800485c <_fflush_r+0x74>)
 800484c:	429c      	cmp	r4, r3
 800484e:	bf08      	it	eq
 8004850:	68ec      	ldreq	r4, [r5, #12]
 8004852:	e7da      	b.n	800480a <_fflush_r+0x22>
 8004854:	08004f4c 	.word	0x08004f4c
 8004858:	08004f6c 	.word	0x08004f6c
 800485c:	08004f2c 	.word	0x08004f2c

08004860 <std>:
 8004860:	2300      	movs	r3, #0
 8004862:	b510      	push	{r4, lr}
 8004864:	4604      	mov	r4, r0
 8004866:	e9c0 3300 	strd	r3, r3, [r0]
 800486a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800486e:	6083      	str	r3, [r0, #8]
 8004870:	8181      	strh	r1, [r0, #12]
 8004872:	6643      	str	r3, [r0, #100]	; 0x64
 8004874:	81c2      	strh	r2, [r0, #14]
 8004876:	6183      	str	r3, [r0, #24]
 8004878:	4619      	mov	r1, r3
 800487a:	2208      	movs	r2, #8
 800487c:	305c      	adds	r0, #92	; 0x5c
 800487e:	f7ff f86b 	bl	8003958 <memset>
 8004882:	4b05      	ldr	r3, [pc, #20]	; (8004898 <std+0x38>)
 8004884:	6224      	str	r4, [r4, #32]
 8004886:	6263      	str	r3, [r4, #36]	; 0x24
 8004888:	4b04      	ldr	r3, [pc, #16]	; (800489c <std+0x3c>)
 800488a:	62a3      	str	r3, [r4, #40]	; 0x28
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <std+0x40>)
 800488e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004890:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <std+0x44>)
 8004892:	6323      	str	r3, [r4, #48]	; 0x30
 8004894:	bd10      	pop	{r4, pc}
 8004896:	bf00      	nop
 8004898:	08004c71 	.word	0x08004c71
 800489c:	08004c93 	.word	0x08004c93
 80048a0:	08004ccb 	.word	0x08004ccb
 80048a4:	08004cef 	.word	0x08004cef

080048a8 <_cleanup_r>:
 80048a8:	4901      	ldr	r1, [pc, #4]	; (80048b0 <_cleanup_r+0x8>)
 80048aa:	f000 b8af 	b.w	8004a0c <_fwalk_reent>
 80048ae:	bf00      	nop
 80048b0:	080047e9 	.word	0x080047e9

080048b4 <__sfmoreglue>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	2568      	movs	r5, #104	; 0x68
 80048b8:	1e4a      	subs	r2, r1, #1
 80048ba:	4355      	muls	r5, r2
 80048bc:	460e      	mov	r6, r1
 80048be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80048c2:	f7ff f98f 	bl	8003be4 <_malloc_r>
 80048c6:	4604      	mov	r4, r0
 80048c8:	b140      	cbz	r0, 80048dc <__sfmoreglue+0x28>
 80048ca:	2100      	movs	r1, #0
 80048cc:	e9c0 1600 	strd	r1, r6, [r0]
 80048d0:	300c      	adds	r0, #12
 80048d2:	60a0      	str	r0, [r4, #8]
 80048d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80048d8:	f7ff f83e 	bl	8003958 <memset>
 80048dc:	4620      	mov	r0, r4
 80048de:	bd70      	pop	{r4, r5, r6, pc}

080048e0 <__sfp_lock_acquire>:
 80048e0:	4801      	ldr	r0, [pc, #4]	; (80048e8 <__sfp_lock_acquire+0x8>)
 80048e2:	f000 b8b3 	b.w	8004a4c <__retarget_lock_acquire_recursive>
 80048e6:	bf00      	nop
 80048e8:	2000025c 	.word	0x2000025c

080048ec <__sfp_lock_release>:
 80048ec:	4801      	ldr	r0, [pc, #4]	; (80048f4 <__sfp_lock_release+0x8>)
 80048ee:	f000 b8ae 	b.w	8004a4e <__retarget_lock_release_recursive>
 80048f2:	bf00      	nop
 80048f4:	2000025c 	.word	0x2000025c

080048f8 <__sinit_lock_acquire>:
 80048f8:	4801      	ldr	r0, [pc, #4]	; (8004900 <__sinit_lock_acquire+0x8>)
 80048fa:	f000 b8a7 	b.w	8004a4c <__retarget_lock_acquire_recursive>
 80048fe:	bf00      	nop
 8004900:	20000257 	.word	0x20000257

08004904 <__sinit_lock_release>:
 8004904:	4801      	ldr	r0, [pc, #4]	; (800490c <__sinit_lock_release+0x8>)
 8004906:	f000 b8a2 	b.w	8004a4e <__retarget_lock_release_recursive>
 800490a:	bf00      	nop
 800490c:	20000257 	.word	0x20000257

08004910 <__sinit>:
 8004910:	b510      	push	{r4, lr}
 8004912:	4604      	mov	r4, r0
 8004914:	f7ff fff0 	bl	80048f8 <__sinit_lock_acquire>
 8004918:	69a3      	ldr	r3, [r4, #24]
 800491a:	b11b      	cbz	r3, 8004924 <__sinit+0x14>
 800491c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004920:	f7ff bff0 	b.w	8004904 <__sinit_lock_release>
 8004924:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004928:	6523      	str	r3, [r4, #80]	; 0x50
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <__sinit+0x68>)
 800492c:	4a13      	ldr	r2, [pc, #76]	; (800497c <__sinit+0x6c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	62a2      	str	r2, [r4, #40]	; 0x28
 8004932:	42a3      	cmp	r3, r4
 8004934:	bf08      	it	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	4620      	mov	r0, r4
 800493a:	bf08      	it	eq
 800493c:	61a3      	streq	r3, [r4, #24]
 800493e:	f000 f81f 	bl	8004980 <__sfp>
 8004942:	6060      	str	r0, [r4, #4]
 8004944:	4620      	mov	r0, r4
 8004946:	f000 f81b 	bl	8004980 <__sfp>
 800494a:	60a0      	str	r0, [r4, #8]
 800494c:	4620      	mov	r0, r4
 800494e:	f000 f817 	bl	8004980 <__sfp>
 8004952:	2200      	movs	r2, #0
 8004954:	2104      	movs	r1, #4
 8004956:	60e0      	str	r0, [r4, #12]
 8004958:	6860      	ldr	r0, [r4, #4]
 800495a:	f7ff ff81 	bl	8004860 <std>
 800495e:	2201      	movs	r2, #1
 8004960:	2109      	movs	r1, #9
 8004962:	68a0      	ldr	r0, [r4, #8]
 8004964:	f7ff ff7c 	bl	8004860 <std>
 8004968:	2202      	movs	r2, #2
 800496a:	2112      	movs	r1, #18
 800496c:	68e0      	ldr	r0, [r4, #12]
 800496e:	f7ff ff77 	bl	8004860 <std>
 8004972:	2301      	movs	r3, #1
 8004974:	61a3      	str	r3, [r4, #24]
 8004976:	e7d1      	b.n	800491c <__sinit+0xc>
 8004978:	08004e40 	.word	0x08004e40
 800497c:	080048a9 	.word	0x080048a9

08004980 <__sfp>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	4607      	mov	r7, r0
 8004984:	f7ff ffac 	bl	80048e0 <__sfp_lock_acquire>
 8004988:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <__sfp+0x84>)
 800498a:	681e      	ldr	r6, [r3, #0]
 800498c:	69b3      	ldr	r3, [r6, #24]
 800498e:	b913      	cbnz	r3, 8004996 <__sfp+0x16>
 8004990:	4630      	mov	r0, r6
 8004992:	f7ff ffbd 	bl	8004910 <__sinit>
 8004996:	3648      	adds	r6, #72	; 0x48
 8004998:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800499c:	3b01      	subs	r3, #1
 800499e:	d503      	bpl.n	80049a8 <__sfp+0x28>
 80049a0:	6833      	ldr	r3, [r6, #0]
 80049a2:	b30b      	cbz	r3, 80049e8 <__sfp+0x68>
 80049a4:	6836      	ldr	r6, [r6, #0]
 80049a6:	e7f7      	b.n	8004998 <__sfp+0x18>
 80049a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049ac:	b9d5      	cbnz	r5, 80049e4 <__sfp+0x64>
 80049ae:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <__sfp+0x88>)
 80049b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049b4:	60e3      	str	r3, [r4, #12]
 80049b6:	6665      	str	r5, [r4, #100]	; 0x64
 80049b8:	f000 f847 	bl	8004a4a <__retarget_lock_init_recursive>
 80049bc:	f7ff ff96 	bl	80048ec <__sfp_lock_release>
 80049c0:	2208      	movs	r2, #8
 80049c2:	4629      	mov	r1, r5
 80049c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80049c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80049cc:	6025      	str	r5, [r4, #0]
 80049ce:	61a5      	str	r5, [r4, #24]
 80049d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80049d4:	f7fe ffc0 	bl	8003958 <memset>
 80049d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80049dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80049e0:	4620      	mov	r0, r4
 80049e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e4:	3468      	adds	r4, #104	; 0x68
 80049e6:	e7d9      	b.n	800499c <__sfp+0x1c>
 80049e8:	2104      	movs	r1, #4
 80049ea:	4638      	mov	r0, r7
 80049ec:	f7ff ff62 	bl	80048b4 <__sfmoreglue>
 80049f0:	4604      	mov	r4, r0
 80049f2:	6030      	str	r0, [r6, #0]
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d1d5      	bne.n	80049a4 <__sfp+0x24>
 80049f8:	f7ff ff78 	bl	80048ec <__sfp_lock_release>
 80049fc:	230c      	movs	r3, #12
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	e7ee      	b.n	80049e0 <__sfp+0x60>
 8004a02:	bf00      	nop
 8004a04:	08004e40 	.word	0x08004e40
 8004a08:	ffff0001 	.word	0xffff0001

08004a0c <_fwalk_reent>:
 8004a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a10:	4606      	mov	r6, r0
 8004a12:	4688      	mov	r8, r1
 8004a14:	2700      	movs	r7, #0
 8004a16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a1e:	f1b9 0901 	subs.w	r9, r9, #1
 8004a22:	d505      	bpl.n	8004a30 <_fwalk_reent+0x24>
 8004a24:	6824      	ldr	r4, [r4, #0]
 8004a26:	2c00      	cmp	r4, #0
 8004a28:	d1f7      	bne.n	8004a1a <_fwalk_reent+0xe>
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a30:	89ab      	ldrh	r3, [r5, #12]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d907      	bls.n	8004a46 <_fwalk_reent+0x3a>
 8004a36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	d003      	beq.n	8004a46 <_fwalk_reent+0x3a>
 8004a3e:	4629      	mov	r1, r5
 8004a40:	4630      	mov	r0, r6
 8004a42:	47c0      	blx	r8
 8004a44:	4307      	orrs	r7, r0
 8004a46:	3568      	adds	r5, #104	; 0x68
 8004a48:	e7e9      	b.n	8004a1e <_fwalk_reent+0x12>

08004a4a <__retarget_lock_init_recursive>:
 8004a4a:	4770      	bx	lr

08004a4c <__retarget_lock_acquire_recursive>:
 8004a4c:	4770      	bx	lr

08004a4e <__retarget_lock_release_recursive>:
 8004a4e:	4770      	bx	lr

08004a50 <__swhatbuf_r>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	460e      	mov	r6, r1
 8004a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a58:	4614      	mov	r4, r2
 8004a5a:	2900      	cmp	r1, #0
 8004a5c:	461d      	mov	r5, r3
 8004a5e:	b096      	sub	sp, #88	; 0x58
 8004a60:	da07      	bge.n	8004a72 <__swhatbuf_r+0x22>
 8004a62:	2300      	movs	r3, #0
 8004a64:	602b      	str	r3, [r5, #0]
 8004a66:	89b3      	ldrh	r3, [r6, #12]
 8004a68:	061a      	lsls	r2, r3, #24
 8004a6a:	d410      	bmi.n	8004a8e <__swhatbuf_r+0x3e>
 8004a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a70:	e00e      	b.n	8004a90 <__swhatbuf_r+0x40>
 8004a72:	466a      	mov	r2, sp
 8004a74:	f000 f962 	bl	8004d3c <_fstat_r>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	dbf2      	blt.n	8004a62 <__swhatbuf_r+0x12>
 8004a7c:	9a01      	ldr	r2, [sp, #4]
 8004a7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a86:	425a      	negs	r2, r3
 8004a88:	415a      	adcs	r2, r3
 8004a8a:	602a      	str	r2, [r5, #0]
 8004a8c:	e7ee      	b.n	8004a6c <__swhatbuf_r+0x1c>
 8004a8e:	2340      	movs	r3, #64	; 0x40
 8004a90:	2000      	movs	r0, #0
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	b016      	add	sp, #88	; 0x58
 8004a96:	bd70      	pop	{r4, r5, r6, pc}

08004a98 <__smakebuf_r>:
 8004a98:	898b      	ldrh	r3, [r1, #12]
 8004a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a9c:	079d      	lsls	r5, r3, #30
 8004a9e:	4606      	mov	r6, r0
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	d507      	bpl.n	8004ab4 <__smakebuf_r+0x1c>
 8004aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	6123      	str	r3, [r4, #16]
 8004aac:	2301      	movs	r3, #1
 8004aae:	6163      	str	r3, [r4, #20]
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	466a      	mov	r2, sp
 8004ab6:	ab01      	add	r3, sp, #4
 8004ab8:	f7ff ffca 	bl	8004a50 <__swhatbuf_r>
 8004abc:	9900      	ldr	r1, [sp, #0]
 8004abe:	4605      	mov	r5, r0
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f7ff f88f 	bl	8003be4 <_malloc_r>
 8004ac6:	b948      	cbnz	r0, 8004adc <__smakebuf_r+0x44>
 8004ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004acc:	059a      	lsls	r2, r3, #22
 8004ace:	d4ef      	bmi.n	8004ab0 <__smakebuf_r+0x18>
 8004ad0:	f023 0303 	bic.w	r3, r3, #3
 8004ad4:	f043 0302 	orr.w	r3, r3, #2
 8004ad8:	81a3      	strh	r3, [r4, #12]
 8004ada:	e7e3      	b.n	8004aa4 <__smakebuf_r+0xc>
 8004adc:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <__smakebuf_r+0x7c>)
 8004ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	6020      	str	r0, [r4, #0]
 8004ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae8:	81a3      	strh	r3, [r4, #12]
 8004aea:	9b00      	ldr	r3, [sp, #0]
 8004aec:	6120      	str	r0, [r4, #16]
 8004aee:	6163      	str	r3, [r4, #20]
 8004af0:	9b01      	ldr	r3, [sp, #4]
 8004af2:	b15b      	cbz	r3, 8004b0c <__smakebuf_r+0x74>
 8004af4:	4630      	mov	r0, r6
 8004af6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004afa:	f000 f931 	bl	8004d60 <_isatty_r>
 8004afe:	b128      	cbz	r0, 8004b0c <__smakebuf_r+0x74>
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	89a0      	ldrh	r0, [r4, #12]
 8004b0e:	4305      	orrs	r5, r0
 8004b10:	81a5      	strh	r5, [r4, #12]
 8004b12:	e7cd      	b.n	8004ab0 <__smakebuf_r+0x18>
 8004b14:	080048a9 	.word	0x080048a9

08004b18 <memchr>:
 8004b18:	4603      	mov	r3, r0
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	b2c9      	uxtb	r1, r1
 8004b1e:	4402      	add	r2, r0
 8004b20:	4293      	cmp	r3, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	d101      	bne.n	8004b2a <memchr+0x12>
 8004b26:	2000      	movs	r0, #0
 8004b28:	e003      	b.n	8004b32 <memchr+0x1a>
 8004b2a:	7804      	ldrb	r4, [r0, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	428c      	cmp	r4, r1
 8004b30:	d1f6      	bne.n	8004b20 <memchr+0x8>
 8004b32:	bd10      	pop	{r4, pc}

08004b34 <memcpy>:
 8004b34:	440a      	add	r2, r1
 8004b36:	4291      	cmp	r1, r2
 8004b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b3c:	d100      	bne.n	8004b40 <memcpy+0xc>
 8004b3e:	4770      	bx	lr
 8004b40:	b510      	push	{r4, lr}
 8004b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b46:	4291      	cmp	r1, r2
 8004b48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b4c:	d1f9      	bne.n	8004b42 <memcpy+0xe>
 8004b4e:	bd10      	pop	{r4, pc}

08004b50 <memmove>:
 8004b50:	4288      	cmp	r0, r1
 8004b52:	b510      	push	{r4, lr}
 8004b54:	eb01 0402 	add.w	r4, r1, r2
 8004b58:	d902      	bls.n	8004b60 <memmove+0x10>
 8004b5a:	4284      	cmp	r4, r0
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	d807      	bhi.n	8004b70 <memmove+0x20>
 8004b60:	1e43      	subs	r3, r0, #1
 8004b62:	42a1      	cmp	r1, r4
 8004b64:	d008      	beq.n	8004b78 <memmove+0x28>
 8004b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b6e:	e7f8      	b.n	8004b62 <memmove+0x12>
 8004b70:	4601      	mov	r1, r0
 8004b72:	4402      	add	r2, r0
 8004b74:	428a      	cmp	r2, r1
 8004b76:	d100      	bne.n	8004b7a <memmove+0x2a>
 8004b78:	bd10      	pop	{r4, pc}
 8004b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b82:	e7f7      	b.n	8004b74 <memmove+0x24>

08004b84 <__malloc_lock>:
 8004b84:	4801      	ldr	r0, [pc, #4]	; (8004b8c <__malloc_lock+0x8>)
 8004b86:	f7ff bf61 	b.w	8004a4c <__retarget_lock_acquire_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	20000258 	.word	0x20000258

08004b90 <__malloc_unlock>:
 8004b90:	4801      	ldr	r0, [pc, #4]	; (8004b98 <__malloc_unlock+0x8>)
 8004b92:	f7ff bf5c 	b.w	8004a4e <__retarget_lock_release_recursive>
 8004b96:	bf00      	nop
 8004b98:	20000258 	.word	0x20000258

08004b9c <_realloc_r>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	4607      	mov	r7, r0
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	460e      	mov	r6, r1
 8004ba4:	b921      	cbnz	r1, 8004bb0 <_realloc_r+0x14>
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bac:	f7ff b81a 	b.w	8003be4 <_malloc_r>
 8004bb0:	b922      	cbnz	r2, 8004bbc <_realloc_r+0x20>
 8004bb2:	f7fe ffcb 	bl	8003b4c <_free_r>
 8004bb6:	4625      	mov	r5, r4
 8004bb8:	4628      	mov	r0, r5
 8004bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bbc:	f000 f8f2 	bl	8004da4 <_malloc_usable_size_r>
 8004bc0:	42a0      	cmp	r0, r4
 8004bc2:	d20f      	bcs.n	8004be4 <_realloc_r+0x48>
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	f7ff f80c 	bl	8003be4 <_malloc_r>
 8004bcc:	4605      	mov	r5, r0
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	d0f2      	beq.n	8004bb8 <_realloc_r+0x1c>
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4622      	mov	r2, r4
 8004bd6:	f7ff ffad 	bl	8004b34 <memcpy>
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f7fe ffb5 	bl	8003b4c <_free_r>
 8004be2:	e7e9      	b.n	8004bb8 <_realloc_r+0x1c>
 8004be4:	4635      	mov	r5, r6
 8004be6:	e7e7      	b.n	8004bb8 <_realloc_r+0x1c>

08004be8 <_raise_r>:
 8004be8:	291f      	cmp	r1, #31
 8004bea:	b538      	push	{r3, r4, r5, lr}
 8004bec:	4604      	mov	r4, r0
 8004bee:	460d      	mov	r5, r1
 8004bf0:	d904      	bls.n	8004bfc <_raise_r+0x14>
 8004bf2:	2316      	movs	r3, #22
 8004bf4:	6003      	str	r3, [r0, #0]
 8004bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004bfe:	b112      	cbz	r2, 8004c06 <_raise_r+0x1e>
 8004c00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c04:	b94b      	cbnz	r3, 8004c1a <_raise_r+0x32>
 8004c06:	4620      	mov	r0, r4
 8004c08:	f000 f830 	bl	8004c6c <_getpid_r>
 8004c0c:	462a      	mov	r2, r5
 8004c0e:	4601      	mov	r1, r0
 8004c10:	4620      	mov	r0, r4
 8004c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c16:	f000 b817 	b.w	8004c48 <_kill_r>
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d00a      	beq.n	8004c34 <_raise_r+0x4c>
 8004c1e:	1c59      	adds	r1, r3, #1
 8004c20:	d103      	bne.n	8004c2a <_raise_r+0x42>
 8004c22:	2316      	movs	r3, #22
 8004c24:	6003      	str	r3, [r0, #0]
 8004c26:	2001      	movs	r0, #1
 8004c28:	e7e7      	b.n	8004bfa <_raise_r+0x12>
 8004c2a:	2400      	movs	r4, #0
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004c32:	4798      	blx	r3
 8004c34:	2000      	movs	r0, #0
 8004c36:	e7e0      	b.n	8004bfa <_raise_r+0x12>

08004c38 <raise>:
 8004c38:	4b02      	ldr	r3, [pc, #8]	; (8004c44 <raise+0xc>)
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	f7ff bfd3 	b.w	8004be8 <_raise_r>
 8004c42:	bf00      	nop
 8004c44:	20000014 	.word	0x20000014

08004c48 <_kill_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	4d06      	ldr	r5, [pc, #24]	; (8004c68 <_kill_r+0x20>)
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	602b      	str	r3, [r5, #0]
 8004c56:	f7fc f886 	bl	8000d66 <_kill>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	d102      	bne.n	8004c64 <_kill_r+0x1c>
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	b103      	cbz	r3, 8004c64 <_kill_r+0x1c>
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
 8004c66:	bf00      	nop
 8004c68:	20000250 	.word	0x20000250

08004c6c <_getpid_r>:
 8004c6c:	f7fc b874 	b.w	8000d58 <_getpid>

08004c70 <__sread>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	460c      	mov	r4, r1
 8004c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c78:	f000 f89c 	bl	8004db4 <_read_r>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	bfab      	itete	ge
 8004c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c82:	89a3      	ldrhlt	r3, [r4, #12]
 8004c84:	181b      	addge	r3, r3, r0
 8004c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c8a:	bfac      	ite	ge
 8004c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c8e:	81a3      	strhlt	r3, [r4, #12]
 8004c90:	bd10      	pop	{r4, pc}

08004c92 <__swrite>:
 8004c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c96:	461f      	mov	r7, r3
 8004c98:	898b      	ldrh	r3, [r1, #12]
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	05db      	lsls	r3, r3, #23
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	4616      	mov	r6, r2
 8004ca2:	d505      	bpl.n	8004cb0 <__swrite+0x1e>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cac:	f000 f868 	bl	8004d80 <_lseek_r>
 8004cb0:	89a3      	ldrh	r3, [r4, #12]
 8004cb2:	4632      	mov	r2, r6
 8004cb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cb8:	81a3      	strh	r3, [r4, #12]
 8004cba:	4628      	mov	r0, r5
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc6:	f000 b817 	b.w	8004cf8 <_write_r>

08004cca <__sseek>:
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	460c      	mov	r4, r1
 8004cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd2:	f000 f855 	bl	8004d80 <_lseek_r>
 8004cd6:	1c43      	adds	r3, r0, #1
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	bf15      	itete	ne
 8004cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ce6:	81a3      	strheq	r3, [r4, #12]
 8004ce8:	bf18      	it	ne
 8004cea:	81a3      	strhne	r3, [r4, #12]
 8004cec:	bd10      	pop	{r4, pc}

08004cee <__sclose>:
 8004cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf2:	f000 b813 	b.w	8004d1c <_close_r>
	...

08004cf8 <_write_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	4611      	mov	r1, r2
 8004d00:	2200      	movs	r2, #0
 8004d02:	4d05      	ldr	r5, [pc, #20]	; (8004d18 <_write_r+0x20>)
 8004d04:	602a      	str	r2, [r5, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	f7fc f864 	bl	8000dd4 <_write>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_write_r+0x1e>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_write_r+0x1e>
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	20000250 	.word	0x20000250

08004d1c <_close_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	2300      	movs	r3, #0
 8004d20:	4d05      	ldr	r5, [pc, #20]	; (8004d38 <_close_r+0x1c>)
 8004d22:	4604      	mov	r4, r0
 8004d24:	4608      	mov	r0, r1
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	f7fc f870 	bl	8000e0c <_close>
 8004d2c:	1c43      	adds	r3, r0, #1
 8004d2e:	d102      	bne.n	8004d36 <_close_r+0x1a>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	b103      	cbz	r3, 8004d36 <_close_r+0x1a>
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
 8004d38:	20000250 	.word	0x20000250

08004d3c <_fstat_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	2300      	movs	r3, #0
 8004d40:	4d06      	ldr	r5, [pc, #24]	; (8004d5c <_fstat_r+0x20>)
 8004d42:	4604      	mov	r4, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	f7fc f86a 	bl	8000e22 <_fstat>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	d102      	bne.n	8004d58 <_fstat_r+0x1c>
 8004d52:	682b      	ldr	r3, [r5, #0]
 8004d54:	b103      	cbz	r3, 8004d58 <_fstat_r+0x1c>
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	bd38      	pop	{r3, r4, r5, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000250 	.word	0x20000250

08004d60 <_isatty_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	2300      	movs	r3, #0
 8004d64:	4d05      	ldr	r5, [pc, #20]	; (8004d7c <_isatty_r+0x1c>)
 8004d66:	4604      	mov	r4, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	f7fc f868 	bl	8000e40 <_isatty>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d102      	bne.n	8004d7a <_isatty_r+0x1a>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	b103      	cbz	r3, 8004d7a <_isatty_r+0x1a>
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	bd38      	pop	{r3, r4, r5, pc}
 8004d7c:	20000250 	.word	0x20000250

08004d80 <_lseek_r>:
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	4604      	mov	r4, r0
 8004d84:	4608      	mov	r0, r1
 8004d86:	4611      	mov	r1, r2
 8004d88:	2200      	movs	r2, #0
 8004d8a:	4d05      	ldr	r5, [pc, #20]	; (8004da0 <_lseek_r+0x20>)
 8004d8c:	602a      	str	r2, [r5, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f7fc f860 	bl	8000e54 <_lseek>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	d102      	bne.n	8004d9e <_lseek_r+0x1e>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	b103      	cbz	r3, 8004d9e <_lseek_r+0x1e>
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	20000250 	.word	0x20000250

08004da4 <_malloc_usable_size_r>:
 8004da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da8:	1f18      	subs	r0, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bfbc      	itt	lt
 8004dae:	580b      	ldrlt	r3, [r1, r0]
 8004db0:	18c0      	addlt	r0, r0, r3
 8004db2:	4770      	bx	lr

08004db4 <_read_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4604      	mov	r4, r0
 8004db8:	4608      	mov	r0, r1
 8004dba:	4611      	mov	r1, r2
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	4d05      	ldr	r5, [pc, #20]	; (8004dd4 <_read_r+0x20>)
 8004dc0:	602a      	str	r2, [r5, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f7fb ffe9 	bl	8000d9a <_read>
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d102      	bne.n	8004dd2 <_read_r+0x1e>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	b103      	cbz	r3, 8004dd2 <_read_r+0x1e>
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	20000250 	.word	0x20000250

08004dd8 <_gettimeofday>:
 8004dd8:	2258      	movs	r2, #88	; 0x58
 8004dda:	4b02      	ldr	r3, [pc, #8]	; (8004de4 <_gettimeofday+0xc>)
 8004ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	4770      	bx	lr
 8004de4:	20000250 	.word	0x20000250

08004de8 <_init>:
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	bf00      	nop
 8004dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dee:	bc08      	pop	{r3}
 8004df0:	469e      	mov	lr, r3
 8004df2:	4770      	bx	lr

08004df4 <_fini>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	bf00      	nop
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr
